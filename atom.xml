<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>呵呵到天亮</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-15T02:07:42.765Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lingengxiong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>lua</title>
    <link href="http://yoursite.com/2020/01/09/lua%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2020/01/09/lua%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2020-01-09T13:51:43.000Z</published>
    <updated>2020-01-15T02:07:42.765Z</updated>
    
    <content type="html"><![CDATA[<p>记录使用lua过程中遇到的问题</p><a id="more"></a><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><h4 id="截去字符串首尾空格"><a href="#截去字符串首尾空格" class="headerlink" title="截去字符串首尾空格"></a>截去字符串首尾空格</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.gsub(str, &quot;^%s*(.-)%s*$&quot;, &quot;%1&quot;)  --截掉前后空格</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录使用lua过程中遇到的问题&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>npm</title>
    <link href="http://yoursite.com/2020/01/03/npm/"/>
    <id>http://yoursite.com/2020/01/03/npm/</id>
    <published>2020-01-03T13:51:43.000Z</published>
    <updated>2020-01-07T05:07:58.617Z</updated>
    
    <content type="html"><![CDATA[<p>记录使用npm过程中遇到的问题，免得再遇到时还到处搜索</p><a id="more"></a><h1 id="配置npm转到淘宝镜像"><a href="#配置npm转到淘宝镜像" class="headerlink" title="配置npm转到淘宝镜像"></a>配置npm转到淘宝镜像</h1><p>安装npm后，默认是使用国外镜像的，所以不翻墙速度简直龟速，使用淘宝镜像就比较快了，切换方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</span><br></pre></td></tr></table></figure><p>且回原来是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npmjs.org&#x2F;</span><br></pre></td></tr></table></figure><p>查看当前npm使用哪个源，则用这个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录使用npm过程中遇到的问题，免得再遇到时还到处搜索&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>hexo笔记</title>
    <link href="http://yoursite.com/2020/01/03/hexo%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/01/03/hexo%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-03T10:51:43.000Z</published>
    <updated>2020-01-15T12:34:44.465Z</updated>
    
    <content type="html"><![CDATA[<p>玩hexo过程中遇到的坑</p><a id="more"></a><p>本文主要参考自 <a href="https://chaooo.github.io/article/20161229.html，主要用来记录hexo搭建的整个过程，方便后面查看。" target="_blank" rel="noopener">https://chaooo.github.io/article/20161229.html，主要用来记录hexo搭建的整个过程，方便后面查看。</a></p><h3 id="1-hexo安装"><a href="#1-hexo安装" class="headerlink" title="1.hexo安装"></a>1.hexo安装</h3><p>在安装<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>之前，必须确认你已经安装了<a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a>和<a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a>。</p><h4 id="1-1-hexo-初始化"><a href="#1-1-hexo-初始化" class="headerlink" title="1.1.hexo 初始化"></a>1.1.hexo 初始化</h4><p>安装 hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>在你想要存放该博客项目的目录下，执行以下命令，这两步都比较耗时，因为要下载许多文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>先预览一下效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>上面命令可简化成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>运行成功后，即可在浏览器输入localhost:4000即可看到效果。</p><h4 id="1-2-部署到远端"><a href="#1-2-部署到远端" class="headerlink" title="1.2.部署到远端"></a>1.2.部署到远端</h4><p>我们这里以gitee码云作为远端进行部署，在根目录下找到_config.xml，添加以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: &#39;git&#39;</span><br><span class="line">  repository:</span><br><span class="line">    #github: git@github.com:lingengxiong&#x2F;lingengxiong.github.io.git</span><br><span class="line">    gitee: git@gitee.com:lingengxiong&#x2F;lingengxiong.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>假如需要部署到多个远端，只需要在repository中配置多个地址即可。</p><p>配置完成后，安装deployer插件，该插件用来将生产的静态文件部署到远端仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装完成即可生产静态文件，继而推送到远端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p><strong>温馨提示：</strong>第一次使用git时会弹出输入框，此时输入git仓库的用户名和密码即可。</p><hr><h3 id="2-hexo-主题安装"><a href="#2-hexo-主题安装" class="headerlink" title="2.hexo 主题安装"></a>2.hexo 主题安装</h3><p>尝试了很多种主题，最后决定用<a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank" rel="noopener">BlueLake</a>，一方面是因为布局功能都很符合自己的需求，另一方面则是挺好看的</p><p><img src="http://lgx.itengshe.com/20200106142713-1.jpg" alt=""></p><h4 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1.安装"></a>2.1.安装</h4><p>安装主题和渲染:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;chaooo&#x2F;hexo-theme-BlueLake.git themes&#x2F;BlueLake</span><br></pre></td></tr></table></figure><p>Blue是基于jade和stylus写的，所有需要安装hexo-renderer-jade和hexo-renderer-stylus</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-renderer-jade@0.3.0 --save</span><br><span class="line">$ npm install hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>切到themes/BlueLake，下载主题所需要的库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd themes&#x2F;BlueLake</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h4 id="2-2-启用主题"><a href="#2-2-启用主题" class="headerlink" title="2.2.启用主题"></a>2.2.启用主题</h4><p>要使用刚下载好的主题，只需要修改根目录下_config.xml配置文件，找到theme字段，修改为BlueLake</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: BuleLake</span><br></pre></td></tr></table></figure><p>依次执行以下命令，然后打开localhost:4000就可以看效果了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="http://lgx.itengshe.com/20200106153336-1.jpg" alt=""></p><h4 id="2-3-配置"><a href="#2-3-配置" class="headerlink" title="2.3 配置"></a>2.3 配置</h4><p>目前的整个工程都还是比较原始的状态，我们的工作就是添加我们自己的东西进去了。</p><h5 id="2-3-1-配置网站头部显示文字"><a href="#2-3-1-配置网站头部显示文字" class="headerlink" title="2.3.1 配置网站头部显示文字"></a>2.3.1 配置网站头部显示文字</h5><p>打开_config.xml，找到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Hexo</span><br><span class="line">subtitle: &#39;&#39;</span><br><span class="line">description: &#39;&#39;</span><br><span class="line">keywords:</span><br><span class="line">author: John Doe</span><br><span class="line">language: en</span><br><span class="line">timezone: &#39;&#39;</span><br></pre></td></tr></table></figure><p><code>title</code>和<code>subtitle</code>分别是网站主标题和副标题，会显示在网站头部；</p><p><code>description</code>在网站界面不会显示，内容会加入网站源码的<code>meta</code>标签中，主要用于SEO；</p><p><code>author</code>就填写网站所有者的名字，会在网站底部的<code>Copyright</code>处有所显示。</p><h5 id="2-3-2-设置语言"><a href="#2-3-2-设置语言" class="headerlink" title="2.3.2 设置语言"></a>2.3.2 设置语言</h5><p>该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在<code>根_config.yml</code>配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure><h5 id="2-3-3-添加about页"><a href="#2-3-3-添加about页" class="headerlink" title="2.3.3 添加about页"></a>2.3.3 添加about页</h5><p>about页是一个介绍自己的页面，可以在上面写一些自己的联系方式或者其他平台博客链接之类</p><p>在根目录下运行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &#39;about&#39;</span><br></pre></td></tr></table></figure><p>打开主题_config.xml，补充详细信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># About page</span><br><span class="line">about:</span><br><span class="line">  photo_url: ## Your photo e.g. http:&#x2F;&#x2F;cdn.chaooo.top&#x2F;blog&#x2F;themeauthor.jpg</span><br><span class="line">  items:</span><br><span class="line">  - label: email</span><br><span class="line">    url: ## Your email with mailto: e.g.  mailto:zhenggchaoo@gmail.com</span><br><span class="line">    title: ## Your email e.g.  zhenggchaoo@gmail.com</span><br><span class="line">  - label: github</span><br><span class="line">    url: ## Your github&#39;url e.g.  https:&#x2F;&#x2F;github.com&#x2F;chaooo</span><br><span class="line">    title: ## Your github&#39;name e.g.  chaooo</span><br><span class="line">  - label: weibo</span><br><span class="line">    url: ## Your weibo&#39;s url e.g.  http:&#x2F;&#x2F;weibo.com&#x2F;zhengchaooo</span><br><span class="line">    title: ## Your weibo&#39;s name e.g.  秋过冬漫长</span><br></pre></td></tr></table></figure><h5 id="2-3-4-安装-RSS-订阅-和-sitemap-网站地图-插件"><a href="#2-3-4-安装-RSS-订阅-和-sitemap-网站地图-插件" class="headerlink" title="2.3.4 安装 RSS(订阅) 和 sitemap(网站地图) 插件"></a>2.3.4 安装 RSS(订阅) 和 sitemap(网站地图) 插件</h5><p>在根目录打开命令行，运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br><span class="line">$ npm install hexo-generator-sitemap --save</span><br><span class="line">$ npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>添加<code>主题_config.yml</code>配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Plugins:</span><br><span class="line">  hexo-generator-feed</span><br><span class="line">  hexo-generator-sitemap</span><br><span class="line">  hexo-generator-baidu-sitemap</span><br><span class="line"></span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line"></span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure><h5 id="2-3-5-更换主题背景"><a href="#2-3-5-更换主题背景" class="headerlink" title="2.3.5 更换主题背景"></a>2.3.5 更换主题背景</h5><p>该主题目前有两种背景，深色和浅色，需要设置为深色只需要修改主题_config.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Theme tone</span><br><span class="line">dark: false #true&#x2F;false</span><br></pre></td></tr></table></figure><h5 id="2-3-6-添加文章版权信息"><a href="#2-3-6-添加文章版权信息" class="headerlink" title="2.3.6 添加文章版权信息"></a>2.3.6 添加文章版权信息</h5><p>修改主题_config.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Theme tone</span><br><span class="line">#Copyright</span><br><span class="line">copyright: </span><br><span class="line">  enable: true #true&#x2F;false  </span><br><span class="line">  describe: 转载请注明出处(必须保留原文作者署名原文链接) #自定义描述替换默认描述</span><br></pre></td></tr></table></figure><h4 id="2-4-添加本地搜索"><a href="#2-4-添加本地搜索" class="headerlink" title="2.4 添加本地搜索"></a>2.4 添加本地搜索</h4><p>默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件<a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="noopener">hexo-generator-json-content</a>来创建JSON数据文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-json-content@2.2.0 --save</span><br></pre></td></tr></table></figure><p>然后在<code>根_config.yml</code>添加配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">jsonContent:</span><br><span class="line">  meta: false</span><br><span class="line">  pages: false</span><br><span class="line">  posts:</span><br><span class="line">    title: true</span><br><span class="line">    date: true</span><br><span class="line">    path: true</span><br><span class="line">    text: true</span><br><span class="line">    raw: false</span><br><span class="line">    content: false</span><br><span class="line">    slug: false</span><br><span class="line">    updated: false</span><br><span class="line">    comments: false</span><br><span class="line">    link: false</span><br><span class="line">    permalink: false</span><br><span class="line">    excerpt: false</span><br><span class="line">    categories: false</span><br><span class="line">    tags: true</span><br></pre></td></tr></table></figure><p>最后在<code>主题_config.yml</code>添加配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local_search: true</span><br></pre></td></tr></table></figure><h4 id="2-5-首页添加文章置顶"><a href="#2-5-首页添加文章置顶" class="headerlink" title="2.5 首页添加文章置顶"></a>2.5 首页添加文章置顶</h4><p>在根目录下打开命令行窗口安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><p>假如文章需要添加置顶，只需要在Front-matter中加上top: true即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: BlueLake博客主题的详细配置</span><br><span class="line">tags: [hexo,BlueLake]</span><br><span class="line">categories: Hexo博客折腾</span><br><span class="line">top: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>2.6 修改站点图标</p><p>站点图标存放在主题的<code>Source</code>目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。<br>您需要准备一张ico格式并命名为** favicon.ico <strong>，请将其放入hexo目录的<code>source</code>文件夹，建议大小：32px X 32px。<br>您需要为苹果设备添加网站徽标，请命名为</strong> apple-touch-icon.png **的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。<br>(有很多网站都可以在线生成ico格式的图片。)</p><hr><h3 id="3-笔记仓库与博客项目分离"><a href="#3-笔记仓库与博客项目分离" class="headerlink" title="3. 笔记仓库与博客项目分离"></a>3. 笔记仓库与博客项目分离</h3><p>我们可以看到目前文章放在source/_posts目录下，我们不可能每次写笔记都跑到这里写，这里我采用git子模块的形式，我们平常笔记在自己的笔记仓库里写，写完推到远端仓库，更新博客只需要先拉一下笔记仓库里的文件，再更新到线上博客。这样做博客项目只负责发布，不负责编辑笔记。我的博客笔记放在<a href="https://gitee.com/lingengxiong/blog-note.git" target="_blank" rel="noopener">https://gitee.com/lingengxiong/blog-note.git</a></p><h4 id="3-1添加子模块的方法"><a href="#3-1添加子模块的方法" class="headerlink" title="3.1添加子模块的方法"></a>3.1添加子模块的方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add 仓库名 路径</span><br></pre></td></tr></table></figure><p>其中，仓库地址是指子模块仓库地址，路径指将子模块放置在当前工程下的路径。<br>注意：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能順利 Clone）</p><h4 id="3-2删除子模块方法"><a href="#3-2删除子模块方法" class="headerlink" title="3.2删除子模块方法"></a>3.2删除子模块方法</h4><p>submodule的删除稍微麻烦点：首先，要在“.gitmodules”文件中删除相应配置信息。然后，执行“git rm –cached ”命令将子模块所在的文件从git中删除。</p><p>故先把source/_post文件夹删除，然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add https:&#x2F;&#x2F;gitee.com&#x2F;lingengxiong&#x2F;blog-note.git source&#x2F;_posts&#x2F;</span><br></pre></td></tr></table></figure><p>这样我们已经成功把笔记仓库引入博客项目内，以后只需要定时拉取最新内容进行发布即可</p><h4 id="3-3-README-md等文件不生成博客内容"><a href="#3-3-README-md等文件不生成博客内容" class="headerlink" title="3.3  README.md等文件不生成博客内容"></a>3.3  README.md等文件不生成博客内容</h4><p>我们引入的博客仓库中包含有该仓库的README.md文件，这些文件不需要生成文章，可以修改根目录_config.xml文件进行屏蔽：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: [&#39;_posts&#x2F;**&#x2F;README.md&#39;,&#39;_posts&#x2F;**&#x2F;README.en.md&#39;]</span><br></pre></td></tr></table></figure><h3 id="4-hexo备份与恢复"><a href="#4-hexo备份与恢复" class="headerlink" title="4.hexo备份与恢复"></a>4.hexo备份与恢复</h3><h4 id="3-1-备份"><a href="#3-1-备份" class="headerlink" title="3.1.备份"></a>3.1.备份</h4><p>在公司好不容易把工程搭建起来，却到了下班的时候，回家想继续搞岂不是蛋疼得再配置一遍？这可不行，而且要是电脑坏了怎么办，前面的时间岂不是白费，所以肯定得做好备份~</p><p>最开始想到的是用传统的git 进行备份，但在网上搜了一下，发现前辈们早已想出更懒的办法，并做成插件—hexo-git-backup，依旧是备份到github，但用起来更加便捷。</p><p>首先安装该插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure><p>然后到你的博客根目录的_config.xml配置文件中添加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#备份博客</span><br><span class="line">backup:</span><br><span class="line">  type: git</span><br><span class="line">  theme: hexo-theme-yilia-master</span><br><span class="line">  message: Back up my blog</span><br><span class="line">  repository:</span><br><span class="line">    github: git@github.com:lingengxiong&#x2F;lingengxiong.github.io.git，backup</span><br><span class="line">    gitee: git@gitee.com:lingengxiong&#x2F;lingengxiong.git,backup</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li>theme：你要备份的主题名称</li><li>message：自定义提交信息</li><li>repository：仓库名，注意仓库地址后面要添加一个分支名，比如我就创建了一个 backup 分支</li></ul><p>我这里备份了两份，一份到github，另一份备份到码云，不需要的只配置一个即可，实际上我们是在放博客静态文件的仓库上拉了一个backup分支，如果你不放心，也可新建一个仓库用来存放整个博客工程</p><p>实际上，并不是整个工程都需要备份的，只需要备份关键几个文件夹即可，其余到时再次生成即可</p><p>1.生成.gitignore文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .gitignore</span><br></pre></td></tr></table></figure><p>2.输入要忽略的文件及文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy&#x2F;</span><br></pre></td></tr></table></figure><p>3.最后用以下命令备份博客：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo backup</span><br></pre></td></tr></table></figure><p>或者简写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo b</span><br></pre></td></tr></table></figure><h4 id="2-恢复"><a href="#2-恢复" class="headerlink" title="2.恢复"></a>2.恢复</h4><p>已经备份好的hexo，到新发电脑只需要使用以下步骤即可恢复，无需从头开始配置，这里以我的仓库地址为例，实际情况改成自己的地址即可</p><p>1.先安装hexo</p><p><code>npm install -g hexo-cli</code></p><p>2.把存在远端的备份git clone下来</p><p><code>git clone https://gitee.com/lingengxiong/lingengxiong.git</code></p><p>这里备份在backup分支，可以直接下载对应分支</p><p><code>git clone -b backup https://gitee.com/lingengxiong/lingengxiong.git</code></p><p>3.下载所需要的库文件</p><p><code>npm install</code></p><p>4.下载推送工具deployer</p><p><code>npm install hexo-deployer-git</code></p><p>5.接下来就可以用熟悉的命令生成博客站点了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>正常情况下以上步骤完成后即可在浏览器用localhost:4000打开你的博客</p><p>继而发布到远端</p><p><code>hexo d</code></p><h3 id="5-添加评论系统gitalk"><a href="#5-添加评论系统gitalk" class="headerlink" title="5.添加评论系统gitalk"></a>5.添加评论系统gitalk</h3><h4 id="5-1申请"><a href="#5-1申请" class="headerlink" title="5.1申请"></a>5.1申请</h4><p>第三方评论系统很多，如</p><p><a href="http://duoshuo.com/" target="_blank" rel="noopener">多说评论</a>、<a href="https://disqus.com/" target="_blank" rel="noopener">Disqus评论</a>、<a href="https://livere.com/" target="_blank" rel="noopener">来必力评论</a>、<a href="http://www.uyan.cc/" target="_blank" rel="noopener">友言评论</a>、<a href="https://gentie.163.com/info.html" target="_blank" rel="noopener">网易云跟帖评论</a>、<a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">畅言评论</a>、基于Github Issue的<a href="https://gitalk.github.io/" target="_blank" rel="noopener">GITALK</a></p><p>但国内的有写时不时就没法用了，所以这里还是使用gitalk</p><p>1.<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">申请GitHub Application</a></p><p><img src="http://lgx.itengshe.com/20200115194943-1.png" alt=""></p><ul><li>Application name： 应用名称，随便起</li><li>Homepage URL： 网站URL，对应自己博客地址</li><li>Application description ：描述，随意</li><li>Authorization callback URL：# 网站URL，博客地址就好</li><li>点击注册，页面会出现其中<strong>Client ID</strong>和<strong>Client Secret</strong>在后面的配置中需要用到</li></ul><h4 id="5-2-配置"><a href="#5-2-配置" class="headerlink" title="5.2 配置"></a>5.2 配置</h4><p>在主题_config.xml配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">comment:</span><br><span class="line">  gitalk:</span><br><span class="line">    enable: true </span><br><span class="line">    ## If you want to use Gitment comment system please set the value to true.</span><br><span class="line">    owner: lingengxiong </span><br><span class="line">    ## Your GitHub ID, e.g. username</span><br><span class="line">    repo: blogtalk</span><br><span class="line">    ## The repository to store your comments, make sure you&#39;re the repo&#39;s owner, e.g. gitalk.github.io</span><br><span class="line">    client_id: </span><br><span class="line">    ## GitHub client ID, e.g. 75752dafe7907a897619</span><br><span class="line">    client_secret: </span><br><span class="line">    ## GitHub client secret, e.g. ec2fb9054972c891289640354993b662f4cccc50</span><br><span class="line">    admin: lingengxiong</span><br><span class="line">    ## Github repo owner and collaborators, only these guys can initialize github issues.</span><br><span class="line">    language: zh-CN </span><br><span class="line">    ## Language</span><br><span class="line">    pagerDirection: last </span><br><span class="line">    # Comment sorting direction, available values are last and first.</span><br></pre></td></tr></table></figure><p><strong>注意:</strong> </p><p>1.repo ,存放评论的仓库，这里我们新建一个名为blogtalk的仓库，这里只需要填入blogtalk即可，而不是完整地址</p><h4 id="5-3-踩坑"><a href="#5-3-踩坑" class="headerlink" title="5.3 踩坑"></a>5.3 踩坑</h4><h5 id="5-3-1-Error-Not-Found"><a href="#5-3-1-Error-Not-Found" class="headerlink" title="5.3.1 Error:Not Found"></a>5.3.1 Error:Not Found</h5><p><img src="http://lgx.itengshe.com/20200115200837-1.png" alt=""></p><p>发现是gittalk中的信息填写错了，name随便写；Homepage URL是你的仓库的名字，Authorization callback URL如果你指向了新</p><p>的域名就填新的，比如说我指向了域名<a href="http://blog.lgx123.cn/；否则也写仓库的名字就可以。" target="_blank" rel="noopener">http://blog.lgx123.cn/；否则也写仓库的名字就可以。</a></p><h5 id="5-3-2未找到相关Issues进行评论"><a href="#5-3-2未找到相关Issues进行评论" class="headerlink" title="5.3.2未找到相关Issues进行评论"></a>5.3.2未找到相关Issues进行评论</h5><p><img src="http://lgx.itengshe.com/20200115195902-1.png" alt=""></p><p>1.理想状态登录一下github账号即可，假如点击后返回首页，那应该是配置有问题，检测gitalk各项参数</p><p>2.配置完成未发布到线上，使用localhost:4000访问，也会出现这种情况，点击登录会跳到线上工程地址，此时只需要试试发布到线上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;玩hexo过程中遇到的坑&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Android笔记</title>
    <link href="http://yoursite.com/2019/12/28/android%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/12/28/android%E7%AC%94%E8%AE%B0/</id>
    <published>2019-12-28T09:00:00.000Z</published>
    <updated>2020-01-15T12:34:44.465Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下Android学习过程</p><a id="more"></a><h2 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h2><p>一般可用于启动 活动、启动服务、发送广播等场景</p><h2 id="四大组件-—-Activity"><a href="#四大组件-—-Activity" class="headerlink" title="四大组件 —- Activity"></a>四大组件 —- Activity</h2><h3 id="活动的启动模式"><a href="#活动的启动模式" class="headerlink" title="活动的启动模式"></a>活动的启动模式</h3><p>活动有4种启动模式，分别是standard ,singleTop, singleTask, singleInstance</p><p>可以在AndroidMainfest.xml中通过<activity>标签指定android:launchMode属性来选择启动模式。</p><h4 id="1-standard"><a href="#1-standard" class="headerlink" title="1.standard"></a>1.standard</h4><p>默认的启动模式，此模式下系统不在乎返回栈中是否存在，每次启动都创新的活动实例</p><p><img src="http://lgx.itengshe.com/20191226131944-1.png" alt=""></p><h4 id="2-singleTop"><a href="#2-singleTop" class="headerlink" title="2.singleTop"></a>2.singleTop</h4><p>此模式下，在启动活动时发现返回栈的<strong>栈顶已经是该活动</strong>，则直接使用，不再创建新的活动实例。但如果该活动不位于栈顶位置，则再次启动该活动时，<strong>还是会创建新的实例</strong></p><p><img src="http://lgx.itengshe.com/20191226132113-1.png" alt=""></p><h4 id="3-singleTask"><a href="#3-singleTask" class="headerlink" title="3.singleTask"></a>3.singleTask</h4><p>使用此模式，每次启动该活动时系统首先会在返回栈中检查是否存在该活动的实例，如果发现已经存在则直接使用该实例，并把在这个活动之上的所有活动统统出栈，如果没发现该活动实例，就会创建一个新的活动实例。</p><p><img src="http://lgx.itengshe.com/20191226132132-1.png" alt=""></p><h4 id="4-singleInstance"><a href="#4-singleInstance" class="headerlink" title="4.singleInstance"></a>4.singleInstance</h4><p>此模式不同于以上3种模式，指定为singleInstance模式的活动会启用一个<strong>新的返回栈</strong>来管理这个活动（其实如果 singleTask 模式指定了不同的 taskAffinity，也会启 动一个新的返回栈）。</p><p><em>应用场景</em>：假设我们的程序中有一个 活动是允许其他程序调用的 ，如果我们想实现其他程序和我们的程序可以共享这个活动的实例，就需要用此模式，</p><p>在这种模式下会有一个单独的返回栈来管理这个活 动，不管是哪个应用程序来访问这个活动，都共用的同一个返回栈，也就解决了共享活动实 例的问题    </p><p><img src="http://lgx.itengshe.com/20191226132159-1.png" alt=""></p><h2 id="四种布局"><a href="#四种布局" class="headerlink" title="四种布局"></a>四种布局</h2><h4 id="1-LinearLayout"><a href="#1-LinearLayout" class="headerlink" title="1.LinearLayout"></a>1.LinearLayout</h4><p>a.线性布局，将它包含的控件在线性方向上一次排列</p><p>b.<strong>排列方向：</strong>可水平方向（vertical)，垂直方向排列(horizontal)，修改方法：</p><p><img src="http://lgx.itengshe.com/20191226132300-1.png" alt=""></p><p>如果LinearLayout的排列方向是<strong>horizontal</strong>，内部控件宽度不能使用math_parent，会占满整个水平方向，同理<strong>vertical</strong>时内部控件高度不可使用match_parent。</p><h4 id="2-RelativeLayout"><a href="#2-RelativeLayout" class="headerlink" title="2.RelativeLayout"></a>2.RelativeLayout</h4><p>相对布局，与LinearLayout相比，更加随意一些，它能通过相对定位的方式让控件出现在布局的任何位置，可相对于整个容器，也可相对于某个控件</p><h4 id="3-FrameLayout"><a href="#3-FrameLayout" class="headerlink" title="3.FrameLayout"></a>3.FrameLayout</h4><p>这种布局没有任何定位方式，所有控件都会摆放在布局的左上角（应用场景不多）</p><h4 id="4-TableLayout"><a href="#4-TableLayout" class="headerlink" title="4.TableLayout"></a>4.TableLayout</h4><p>使用表格方式来排列控件（不常用）</p><h2 id="单位和尺寸"><a href="#单位和尺寸" class="headerlink" title="单位和尺寸"></a>单位和尺寸</h2><p><strong>px</strong>    像素，屏幕中可以显示的最小元素单位</p><p><strong>pt</strong>    磅数的意思，1磅等于1/72英尺，一般用作字体的单位</p><p><strong>dp</strong>    密度无关像素，也称dip，和px相比，它再不同密度的屏幕中的显示比例保持一致</p><p><strong>sp</strong>    可伸缩像素，采用与dp同样的设计理念，解决字体大小适配问题</p><p><strong>密度</strong>    Android中密度就是屏幕每英寸所包含的像素数，以dip为单位。</p><p>比如一个手机屏幕的宽是 2 英寸长是 3 英寸，如果 它的分辨率是 320x480 像素，那这个屏幕的密度就是 160dpi，如果它的分辨率是 640*960， 那这个屏幕的密度就是 320dpi，因此密度值越高的屏幕显示的效果就越精细。</p><p>Android 规定，在160dpi的屏幕上，1dp等于1px，而在320dpi的屏幕上，1dp等于2px.</p><p>因此，使用 dp 来指定控件的宽和高，就可以保证控件在不同密度的屏幕中的 显示比例保持一致。    </p><p>​    </p><h2 id="四大组件-—–-Broadcast-Receive"><a href="#四大组件-—–-Broadcast-Receive" class="headerlink" title="四大组件 —– Broadcast Receive"></a>四大组件 —– Broadcast Receive</h2><p>Android中的广播分为两种类型，即 <strong>标准广播</strong> 和 <strong>有序广播</strong></p><h4 id="1-标准广播"><a href="#1-标准广播" class="headerlink" title="1.标准广播"></a>1.标准广播</h4><p>标准广播是一直完全异步执行的广播，广播发出后，所有的广播接收器几乎都会在同一时刻接收到这条广播消息，因此他们之间没有任何的先后顺序可言。这种广播效率比较高，也意味着它无法被截断</p><p><img src="http://lgx.itengshe.com/20191226132321-1.png" alt=""></p><h4 id="2-有序广播"><a href="#2-有序广播" class="headerlink" title="2.有序广播"></a>2.有序广播</h4><p>有序广播是一种同步执行的广播，在广播发出后，同一时刻只会有一个广播接收器能接收到这条消息，当这个广播接收器中的逻辑执行完毕后，广播才会继续传递。</p><p>此时广播接收器是有先后顺序的，优先级高的广播接收器可以优先收到广播消息，也可截断正则传递的广播，使后面的广播接收器无法接收广播消息</p><p><img src="http://lgx.itengshe.com/20191226132340-1.png" alt=""></p><h4 id="注册广播"><a href="#注册广播" class="headerlink" title="注册广播"></a>注册广播</h4><p>分两种方式：在代码中注册（动态注册）、在AndroidMainifest.xml中注册（静态注册）</p><h2 id="持久化计算"><a href="#持久化计算" class="headerlink" title="持久化计算"></a>持久化计算</h2><p>Android系统主要提供三种数据持久化功能—–<strong>文件存储</strong>、<strong>SharedPreference存储</strong>以及<strong>数据库存储</strong></p><h4 id="1-文件存储"><a href="#1-文件存储" class="headerlink" title="1.文件存储"></a>1.文件存储</h4><p>不对存储的内容进行任何的格式化出来，所有数据原封不动存在文件中（适合存储一些简单的文本数据或者二进制数据），文件默认存储到/data/data/<packagename>/file/目录下</p><h4 id="2-SharedPreferences存储"><a href="#2-SharedPreferences存储" class="headerlink" title="2.SharedPreferences存储"></a>2.SharedPreferences存储</h4><p>使用<strong>键值对</strong>的方式来存储数据，较文件存储方便得多，而且支持多种不同数据类型的存储，即如果存入的数据类型是整型，读取出来的数据也是整形的</p><p>存储前，先获得SharedPreferences对象，Android中主要提供三种方法得到SharedPreferences对象</p><h5 id="1-getSharedPreferences"><a href="#1-getSharedPreferences" class="headerlink" title="1.getSharedPreferences"></a>1.getSharedPreferences</h5><p>​    Context类中的getSharedPreferences(fileName，操作模式)方法</p><p>​    <strong>第一个参数</strong>用于指定文件名称，指定文件不存在则会创建一个，SharedPreferences文件存放在/data/data/<packagename>/shared_prefs/目录下</p><p>​    <strong>第二个参数</strong>用于指定操作模式，主要有两种模式可以选 择，MODE_PRIVATE 和 MODE_MULTI_PROCESS。MODE_PRIVATE 仍然是默认的操 作模式，和直接传入 0 效果是相同的，表示只有当前的应用程序才可以对这个 SharedPreferences文件进行读写。MODE_MULTI_PROCESS 则一般是用于会有多个进程中 对同一个 SharedPreferences 文件进行读写的情况。类似地，MODE_WORLD_READABLE 和 MODE_WORLD_WRITEABLE 这两种模式已在 Android 4.2 版本中被废弃    </p><h5 id="2-getSharedPreferences"><a href="#2-getSharedPreferences" class="headerlink" title="2.getSharedPreferences"></a><strong>2.</strong>getSharedPreferences</h5><p>​    Activity类中的getSharedPreferences()方法</p><p>​    只接受一个操作模式参数，因为使用此方法时会自动将当前的类名作为SharedPreferences的文件名</p><h5 id="3-getDefaultSharedPreferences"><a href="#3-getDefaultSharedPreferences" class="headerlink" title="3.getDefaultSharedPreferences"></a><strong>3.</strong>getDefaultSharedPreferences</h5><p>​    PreferencesManager类中的getDefaultSharedPreferences()方法</p><p>​    这是一个静态方法，接受一个Context参数，并自动使用当前应用程序的包名作为前缀来命名SharedPreferences对象</p><h5 id="a-向SharedPreferences文件中存储数据"><a href="#a-向SharedPreferences文件中存储数据" class="headerlink" title="a.向SharedPreferences文件中存储数据"></a>a.<strong>向SharedPreferences文件中存储数据</strong></h5><p>分三步实现</p><p>1.调用SharedPreferences对象的edit()方法来获取一个SharedPreferences.Editor对象</p><p>2.向SharedPreferences对象中添加数据，比如添加布尔类型的数据就是用putBoolean方法</p><p>3.调用commit()方法，将添加的数据提交，从而完成数据存储操作</p><h5 id="b-从SharedPreferences文件中读取数据"><a href="#b-从SharedPreferences文件中读取数据" class="headerlink" title="b.从SharedPreferences文件中读取数据"></a>b.从SharedPreferences文件中读取数据</h5><p>使用SharedPreferences的get方法来对存储数据进行读取，每种get方法对应SharedPreferences.Editor中的一种put方法，例如读取布尔值，就使用getBoolean()方法</p><p>get方法接受两个参数，第一个是“键”，第二个是 默认值（即传入键找不到对应的值是，返回什么样的默认值）</p><h4 id="3-SQLite数据库存储"><a href="#3-SQLite数据库存储" class="headerlink" title="3.SQLite数据库存储"></a>3.SQLite数据库存储</h4><p>SQLite是一筐轻量级的关系型数据库，运算速度快，占用资源少，通常只需要几百k的内存就够了</p><p>Android提供了<strong>SQLiteOpenHelper</strong>帮助类，这是一个抽象类，有两个抽象方法—onCreate() 和onUpgrade()，</p><p>使用时我们需要创建一个帮助类继承SQLiteOpenHelper，并在自己的帮助类中重写两个抽象方法，然后在这两个方法中区实现创建、升级数据库的逻辑</p><p><strong>SQLiteOpenHelper</strong>中有两个构造方法可以重写，一般使用参数较少的的方法，此方法接收四个参数；</p><p>1.Context     2.数据库名    3.允许我们在查询数据的时候返回一个自定义的Cursor，一般传入null</p><p>4.当前数据库的版本号</p><h5 id="创建数据库："><a href="#创建数据库：" class="headerlink" title="创建数据库："></a><em>创建数据库：</em></h5><p>构建出SQLiteOpenHelper实例后，再调用getReadableDatabase()或getWritableDatabase()就能创建出数据库了，数据库文件存放在/data/data/<packagename>/database/目录下</p><h5 id="升级数据库"><a href="#升级数据库" class="headerlink" title="升级数据库"></a>升级数据库</h5><p>只需要在构建SQLiteOpenHelper时传入的高于之前的版本号，就会调用onUpgrade()</p><h5 id="SQLite数据类型"><a href="#SQLite数据类型" class="headerlink" title="SQLite数据类型"></a><strong>SQLite数据类型</strong></h5><p>integer     整型</p><p>real        浮点型</p><p>text        文本型</p><p>blob    二进制型</p><hr><h2 id="四大组件-—-Content-Provider"><a href="#四大组件-—-Content-Provider" class="headerlink" title="四大组件 —- Content Provider"></a>四大组件 —- Content Provider</h2><p>主要用于在不同应用程序之间实现数据共享的功能，它的完整机制允许程序访问另一个程序中的数据，同时又保证被访问数据的安全性。</p><p>使用内容提供器是Android实现程序共享数据的标准方式</p><h4 id="1-访问其他程序中的数据"><a href="#1-访问其他程序中的数据" class="headerlink" title="1.访问其他程序中的数据"></a>1.访问其他程序中的数据</h4><p>​    每个应用程序想要访问内容提供器中的共享数据，要借助ContentResolve类，可以通过Context中的<strong>getContentResolver()</strong>方法获得该类的实例</p><p>ContentResolver提供了对数据进行CRUD的操作方法，即</p><ol><li>insert()添加数据 </li><li>update()更新数据</li><li>delete()删除数据</li><li>query()查询数据</li></ol><p>这几个方法都只需要传入Uri参数，即内容URI，内容URI给内容提供器中的数据建立了唯一的标识，由两部分组成，即权限（authority）和路径（path）</p><p>​    a.权限用于对不同的应用程序做区分的，为了避免冲突，都会采用程序包名的方式来进行命名，如com.example.app，则该程序对应的权限命名为com.example.app.provider</p><p>​    b.路径用于对同一应用程序中不同的表做区分，通常加到权限后面，比如某个程序的数据库中有两张表，table1和table2，此时路径分别命名为/table1和/table2，与权限结合起来，内容URI就变成              com.example.app.provider/table1 和</p><p>com.example.app.provider/table2</p><p>​    在字符串头部加上协议声明，得到最标准的URI的格式写法如下：</p><p>content://com.example.app.provider/table1 </p><p>content://com.example.app.provider/table2</p><p>​    得到URI字符串后，将其解析成Uri对象才可作为参数传入增删改查方法中</p><p>​    Uri uri = Uri.pase(“content://com.example.app.provider/table1”)</p><h2 id="异步消息处理机制"><a href="#异步消息处理机制" class="headerlink" title="异步消息处理机制"></a>异步消息处理机制</h2><p>Android中的异步消息处理主要由四个部分组成，Message、Handler、MessageQueue、和Looper。</p><p>###1.Messgae</p><p>Message是线程之间传递的消息，可在内部携带少量的信息，用于不同线程之间交换数据。</p><p>例如what字段，除此之外arg1和arg2字段可携带一些整型数据，obj字段携带一个Object对象</p><h3 id="2-Handler"><a href="#2-Handler" class="headerlink" title="2.Handler"></a>2.Handler</h3><p>顾名思义就是处理者的意思，主要用你发送和处理消息。</p><p>发送消息一般是使用Handler的sendMessage()方法，发出的消息经过一系列辗转后，最终传递到Handler的handlerMessage()方法中。</p><h3 id="3-MessageQueue"><a href="#3-MessageQueue" class="headerlink" title="3.MessageQueue"></a>3.MessageQueue</h3><p>消息队列的意思，它主要用于存放所有通过Handler发送的消息。这部分消息会一直存在消息队列中，等待被处理。每个线程中只会有一个MessageQueue对象</p><h3 id="4-Looper"><a href="#4-Looper" class="headerlink" title="4.Looper"></a>4.Looper</h3><p>Looper 是每个线程中的 MessageQueue 的管家，调用 Looper 的 loop()方法后，就会 进入到一个无限循环当中，然后每当发现 MessageQueue 中存在一条消息，就会将它取 出，并传递到 Handler 的 handleMessage()方法中。每个线程中也只会有一个 Looper 对象。  </p><hr><h2 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h2><p>AsyncTask 基于异步消息处理机制，Android帮我们做了很好的封装</p><p>AsyncTask是一个抽象类，使用它得用一个子类去继承它，继承时可以为AsyncTask类指定一个泛型参数。</p><h4 id="1-Params"><a href="#1-Params" class="headerlink" title="1.Params"></a>1.Params</h4><p>​    在执行 AsyncTask 时需要传入的参数，可用于在后台任务中使用。    </p><h4 id="2-Progress"><a href="#2-Progress" class="headerlink" title="2.Progress"></a>2.Progress</h4><p>​    后台任务执行时，如果需要在界面上显示当前的进度，则使用这里指定的泛型作为 进度单位。    </p><h4 id="3-Result"><a href="#3-Result" class="headerlink" title="3.Result"></a>3.Result</h4><p>​    当任务执行完毕后，如果需要对结果进行返回，则使用这里指定的泛型作为返回值 类型。    </p><p>因此，一个最简单的自定义 AsyncTask 就可以写成如下方式： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class DownloadTask extends AsyncTask&lt;Void, Integer, Boolean&gt; &#123;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要重写AsyncTask中的几个方法才能完成对任务的定制。</p><h4 id="1-onPreExecute"><a href="#1-onPreExecute" class="headerlink" title="1.onPreExecute()"></a>1.onPreExecute()</h4><p>​    在后台任务开始之前调用，用于进行一些界面上的初始化，比如显示一个进度条对话框等</p><h4 id="2-doInBackground-Params"><a href="#2-doInBackground-Params" class="headerlink" title="2.doInBackground(Params)"></a>2.doInBackground(Params)</h4><p>​    这个方法中的所有代码都会在子线程中运行，我们在这里处理所有耗时任务。任务完成后通过return语句来返回任务执行结果。如果AsyncTask的第三个泛型参数为void，就不返回执行结果。</p><p>​    <strong>注意</strong>：此方法中不可进行UI操作，如需更新UI元素，比如反馈当前任务进度，可以调用publishProgress(Progress …)方法来完成</p><h4 id="3-onProgressUpdate-Progress…"><a href="#3-onProgressUpdate-Progress…" class="headerlink" title="3.onProgressUpdate(Progress…)"></a>3.onProgressUpdate(Progress…)</h4><p>​    在后台任务中调用publishProgress(Progress…)方法后，会很快调用此方法，方法中携带的参数就是在后台任务中传递过来的。在这个方法中可以对UI进行操作，利用参数中的数值对界面元素进行相应的更新。</p><h4 id="4-onPostExecute-Result"><a href="#4-onPostExecute-Result" class="headerlink" title="4.onPostExecute(Result)"></a>4.onPostExecute(Result)</h4><p>​    当后台任务执行完毕并通过return语句进行返回时，这个方法就会被调用。返回的数据会作为参数传递到此方法中，可以利用返回的数据进行一些UI操作，比如提醒任务执行结果，以及关闭进度条对话框。</p><p>因此，一个比较完整的自定义 AsyncTask 就可以写成如下方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class DownloadTask extends AsyncTask&lt;Void, Integer, Boolean&gt; &#123;</span><br><span class="line">    protected void onPreExecute() &#123;</span><br><span class="line">    progressDialog.show(); &#x2F;&#x2F; 显示进度对话框</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected Boolean doInBackground(Void... params) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                int downloadPercent &#x3D; doDownload(); &#x2F;&#x2F; 这是一个虚构的方法</span><br><span class="line">                publishProgress(downloadPercent);</span><br><span class="line">                if (downloadPercent &gt;&#x3D; 100) &#123;</span><br><span class="line">                break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">        return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onProgressUpdate(Integer... values) &#123;</span><br><span class="line">        &#x2F;&#x2F; 在这里更新下载进度</span><br><span class="line">        progressDialog.setMessage(&quot;Downloaded &quot; + values[0] + &quot;%&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onPostExecute(Boolean result) &#123;</span><br><span class="line">        progressDialog.dismiss(); &#x2F;&#x2F; 关闭进度对话框</span><br><span class="line">        &#x2F;&#x2F; 在这里提示下载结果</span><br><span class="line">            if (result) &#123;</span><br><span class="line">                Toast.makeText(context, &quot;Download succeeded&quot;,</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                Toast.makeText(context, &quot; Download failed&quot;,</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="四大组件-—-Service"><a href="#四大组件-—-Service" class="headerlink" title="四大组件 —- Service"></a>四大组件 —- Service</h2><h3 id="1-定义一个服务"><a href="#1-定义一个服务" class="headerlink" title="1. 定义一个服务"></a>1. 定义一个服务</h3><p>基本的Service这样定义，onBind 是service中唯一一个抽象方法，所以必须在子类中进行实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class MyService extends Service&#123;</span><br><span class="line">@Override</span><br><span class="line">public IBinder onBind(Intent intent)&#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让服务去处理一些事情，逻辑应该写在哪里呢？</p><p>我们又重写onCreate()，onStartCommand()和onDestroy(）方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class MyService extends Service &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public IBinder onBind(Intent intent) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">        return super.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上三个新加的方法是每个服务中最常用的方法</p><ol><li>oncreate() 在服务创建的时候调用</li><li>onStartCommand() 会在每次服务启动的时候调用</li><li>onDestroy() 会在服务销毁的时候调用</li></ol><p>所以一旦服务启动就需要执行的动作，逻辑写在onStartCommand()方法中，在onDestroy中回收那些不需要的资源。</p><p><strong>注意：</strong>每个服务都需要在AndroidManifest.xml中注册才能生效，这似乎是四大组件的共同特点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    package&#x3D;&quot;com.example.servicetest&quot;</span><br><span class="line">    android:versionCode&#x3D;&quot;1&quot;</span><br><span class="line">    android:versionName&#x3D;&quot;1.0&quot; &gt;</span><br><span class="line">    ……</span><br><span class="line">    &lt;application</span><br><span class="line">        android:allowBackup&#x3D;&quot;true&quot;</span><br><span class="line">        android:icon&#x3D;&quot;@drawable&#x2F;ic_launcher&quot;</span><br><span class="line">        android:label&#x3D;&quot;@string&#x2F;app_name&quot;</span><br><span class="line">        android:theme&#x3D;&quot;@style&#x2F;AppTheme&quot; &gt;</span><br><span class="line">        ……</span><br><span class="line">        &lt;service android:name&#x3D;&quot;.MyService&quot; &gt;</span><br><span class="line">        &lt;&#x2F;service&gt;</span><br><span class="line">    &lt;&#x2F;application&gt;</span><br><span class="line">&lt;&#x2F;manifest&gt;</span><br></pre></td></tr></table></figure><h3 id="2-启动和停止服务"><a href="#2-启动和停止服务" class="headerlink" title="2. 启动和停止服务"></a>2. 启动和停止服务</h3><p>启动和停止服务主要借助Intent来实现</p><p>启动服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent starIntent &#x3D; new Intent(this, MyService.class);</span><br><span class="line">startService(starIntent);</span><br></pre></td></tr></table></figure><p>停止服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent stopIntent &#x3D; new Intent(this, MyService.class);</span><br><span class="line">stopService(stopIntent);</span><br></pre></td></tr></table></figure><p>服务除了由活动来决定何时停止外，它也能自己让自己停下来，只需要服务自己调用stopSelf()方法即可</p><h3 id="3-活动与服务进行通信"><a href="#3-活动与服务进行通信" class="headerlink" title="3.活动与服务进行通信"></a>3.活动与服务进行通信</h3><p>​        上面使用的方法在活动中启动和停止服务，但是服务启动后活动和服务基本没有关系了，无法得知服务的状态，如何才能让活动和服务联系更加紧密呢，让活动能随时指挥服务去执行某些任务？这就需要用到刚才那个我们必须要重写的<strong>onBind()</strong>方法了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class MyService extends Service &#123;</span><br><span class="line">    private DownloadBinder mBinder &#x3D; new DownloadBinder();</span><br><span class="line">    class DownloadBinder extends Binder &#123;</span><br><span class="line">        public void startDownload() &#123;</span><br><span class="line">        Log.d(&quot;MyService&quot;, &quot;startDownload executed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">        public int getProgress() &#123;</span><br><span class="line">            Log.d(&quot;MyService&quot;, &quot;getProgress executed&quot;);</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public IBinder onBind(Intent intent) &#123;</span><br><span class="line">    return mBinder;</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        这里我们在刚才建的MyService类中新建一个DownloadBinder类，并继承自Binder，这个类里提供方法供外部使用，我们这里提供了<strong>开始下载</strong>方法和<strong>获取下载进度</strong>的方法。然后在MyService中创建了DownloadBinder实例，并在onBind()方法中返回该实例。</p><p>​        如何在活动中调用服务里的方法呢？实际上当一个活动与服务绑定了之后，就可以调用Binder提供的方法了。</p><p>​        在活动中，我们首先创建ServiceConnection 匿名类，在里面重写onServiceConnected()方法和 onServiceDisconnected()方法，这两个方法分别在活动与服务成功绑定和解除绑定时调用。在onServiceConnecter()方法中，我们又向下转型得到的DownloadBinder实例，有了实例，我们就可以在活动中调用DownloadBinder中的任何public方法了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private MyService.DownloadBinder downloadBinder;</span><br><span class="line">private ServiceConnection connection &#x3D; new ServiceConnection()&#123;</span><br><span class="line">@Override</span><br><span class="line">    public void onServiceDisconnected(ComponentName name) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void onServiceConnected(ComponentName name, IBinder service) &#123;</span><br><span class="line">        downloadBinder &#x3D; (MyService.DownloadBinder) service;</span><br><span class="line">        downloadBinder.startDownload();</span><br><span class="line">        downloadBinder.getProgress();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        别高兴太早，我们还没实现绑定呢。绑定方法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent bindIntent &#x3D; new Intent(this, Myservice.class);</span><br><span class="line">bindService(bindIntent, connection, BIND_AUTO_CREATE);</span><br></pre></td></tr></table></figure><p>​        bindService()接收三个参数，第一个就是刚构建出来的Intent对象，第二个参数是前面创角出来的ServiceConnection实例，第三个参数是标志位，BIND_AUTO_CREATE表示在活动和服务进行绑定后自动创建服务，此时MyService中的onCreate()方法会执行，但onStartCommand()方法不会执行。</p><p>​        解绑方法比较简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unbindService(connetion);</span><br></pre></td></tr></table></figure><p>​        <em>注意：</em>任何一个服务在整个应用程序范围内都是通用的，即任何一个活动都可与之绑定，而且绑定后他们都可以获取到相同的DownloadBinder实例。</p><h3 id="4-服务的生命周期"><a href="#4-服务的生命周期" class="headerlink" title="4.服务的生命周期"></a>4.服务的生命周期</h3><p>onCreate() ,onStartCommand(),onBind(),onDestroy()等方法都是在服务生命周期里可能回调的方法。</p><p>1.项目中任意位置调用Context的startService()方法，相应的服务就会启动，并回调onStartCommand()方法，假如服务没创建过，onCreat()方法会先于onStartCommand()方法执行。</p><p>2.服务启动后一直保持运行，直到stopService()或stopSelf()被调用</p><p>每次调用startService()方法，onStartCommand()方法就会调用一次，但每个服务只会有一个实例，无论调用多少次startService()，只需要调用一次stopService()或stopSelf()即可停止该服务</p><p>3.调用Context的bindService()方法，获取一个服务的持久连接，这是就会回调服务的onBind()方法，如果服务没创建过，onCreate()会先于onBind()方法执行。调用方可以获取onBind()方法里返回的IBinder对象的实例，这样即可与服务自由的通信了。调用方与服务之间的连接没有断开，服务就会一直保持运行状态。</p><p>4.调用startService()方法后，又调用stopService()方法，onDestroy()方法就会执行，此时服务已经销毁。类似的，调用bindService()方法后又调用unbindService()方法，onDestroy()方法也会执行。</p><p>5.Android系统机制规定，一个服务被启动或者被绑定后，就会一直处于运行状态，必须同时调用stopService()和unbindService()方法，onDestroy()方法才会执行。</p><h3 id="5-前台服务"><a href="#5-前台服务" class="headerlink" title="5.前台服务"></a>5.前台服务</h3><p>服务的系统优先级比较低，内存不足时，可能被回收，而前台服务就不会因为内存不足而被回收。</p><p><strong>与普通服务最大区别：</strong>会有一个正在运行的图标在系统状态栏显示。下拉状态栏可以看到详细信息，类似通知的效果。</p><p>创建方法类似创建通知方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class MyService extends Service &#123;</span><br><span class="line">    ……</span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">        Notification notification &#x3D; new Notification(R.drawable.ic_launcher,</span><br><span class="line">        &quot;Notification comes&quot;, System. currentTimeMillis());</span><br><span class="line">        Intent notificationIntent &#x3D; new Intent(this, MainActivity.class);</span><br><span class="line">        PendingIntent pendingIntent &#x3D; PendingIntent.getActivity(this, 0,</span><br><span class="line">        notificationIntent, 0);</span><br><span class="line">        notification.setLatestEventInfo(this, &quot;This is title&quot;, &quot;This is</span><br><span class="line">        content&quot;, pendingIntent);</span><br><span class="line">        startForeground(1, notification);</span><br><span class="line">        Log.d(&quot;MyService&quot;, &quot;onCreate executed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="1-使用HTTP协议访问网络"><a href="#1-使用HTTP协议访问网络" class="headerlink" title="1.使用HTTP协议访问网络"></a>1.使用HTTP协议访问网络</h3><p>​        Android 上发送HTTP请求有两种，1.<strong>HttpURLConnection</strong>和 2. <strong>HttpClient</strong></p><h4 id="1-1-HttpURLConnection"><a href="#1-1-HttpURLConnection" class="headerlink" title="1.1 HttpURLConnection"></a>1.1 HttpURLConnection</h4><p>先获取HttpURLConnection实例，new出一个URL对象，传入目标的网络地址，然后调一下openConnection()方法即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">URL url &#x3D; new URL(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;);</span><br><span class="line">HttpURLConnection connection &#x3D; (HttpURLConnection)url.openConnection();</span><br></pre></td></tr></table></figure><p>得到HttpURLConnection的实例后，设置HTTP请求所使用的方法。常用方法：GET 和 POST</p><p>​        GET：表示希望从服务器获取数据</p><p>​        POST :表示希望提交数据到服务器</p><p>写法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.setRequestMethod(&quot;GET&quot;);</span><br></pre></td></tr></table></figure><p>设置连接超时、读取超时的毫秒，以及服务器希望得到的一些消息头等。根据自己实际情况进行编写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connection.setConnectTimeout(8000);</span><br><span class="line">connection.setReadTimeout(8000);</span><br></pre></td></tr></table></figure><p>之后调取getInputStream()方法就可以获取到服务器返回的输入流了，剩下的任务就是对输入流进行读取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputStream in &#x3D; connection.getInputStream();</span><br></pre></td></tr></table></figure><p>最后调用disconnect()方法关闭HTTP连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.disconnect();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下Android学习过程&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>webpack笔记</title>
    <link href="http://yoursite.com/2019/02/27/webpack%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/27/webpack%E7%AC%94%E8%AE%B0/</id>
    <published>2019-02-27T10:00:43.000Z</published>
    <updated>2020-01-07T05:07:58.617Z</updated>
    
    <content type="html"><![CDATA[<p>今天想了解一下webpack，但找了网上的一系列教程，都会或多或少出现一些不明报错，实在恼火，经过几番简化，终于用最简单的方法使用了webpack，在此记录一下</p><a id="more"></a><p>一.环境配置<br>1.首先，安装Node.js，这里不赘述，未接触nmp的童鞋可以参考Node.js安装配置</p><p>2.在cmd中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure><p>3.在自己测试的位置创建一个新的文件夹，命名webpack_demo</p><p><img src="http://lgx.itengshe.com/20200104135037-1.png" alt=""></p><p>4.进入刚刚所创建的文件夹webpack_demo，按住shift键同时点击鼠标右键(即打开cmd并进入webpack_demo文件夹)</p><p><img src="http://lgx.itengshe.com/20200104135055-1.png" alt=""></p><p>5.在打开的命令窗口键入：npm init，根据提示填写信息，name表示项目名，version表示版本等等，不一一赘述了，也可使用默认值，一路回车即可，最后出现“is this ok?”时，敲击回车键，webpack_demo文件夹便生成了package.json文件夹</p><p><img src="http://lgx.itengshe.com/20200104135115-1.png" alt=""></p><p>二.构建webpack项目<br>1.在webpack_demo文件夹下创建webpack.config.js文件，此文件为webpack的配置文件。具体内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;webpack.config.js</span><br><span class="line">module.exports&#x3D;&#123;</span><br><span class="line">entry:&#39;.&#x2F;src&#x2F;js&#x2F;entry.js&#39;, &#x2F;&#x2F;页面入口文件</span><br><span class="line">&#x2F;&#x2F;输出文件</span><br><span class="line">output:&#123;</span><br><span class="line">filename:&#39;index.js&#39;,&#x2F;&#x2F;输出文件名</span><br><span class="line">path:__dirname+&#39;&#x2F;out&#39;,&#x2F;&#x2F;输出文件路径</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数简单说明：</p><ul><li><p>entry： 是 页面入口文件配置 （html文件引入唯一的js 文件）</p></li><li><p>output：对应输出项配置 </p><ul><li>​    path ：入口文件最终要输出到哪里，</li><li>​    filename：输出文件的名称</li><li>​    publicPath：公共资源路径</li></ul></li></ul><p>2.接着，我们在创建一些基本的文件保存路径，我们这里创建网页中最基本的一些文件夹</p><p><img src="http://lgx.itengshe.com/20200104135326-1.png" alt=""></p><p><img src="http://lgx.itengshe.com/20200104135341-1.png" alt=""></p><p>3.接下来我们在index.html，和entry.js中填充点内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- index.html --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;hello world&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;.&#x2F;out&#x2F;index.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; entry.js</span><br><span class="line">document.write(&#39;呵呵到天亮&#39;);</span><br></pre></td></tr></table></figure><p>4.完成以上操作，我们可以来试试效果了，在刚才所打开的cmd窗口中输入webpack （假如已经关闭，按上面第4步操作即可）</p><p>下面WARNING in configuration原因及解决办法可点击链接：<a href="https://blog.csdn.net/lgx1134569285/article/details/87986317" target="_blank" rel="noopener">https://blog.csdn.net/lgx1134569285/article/details/87986317</a></p><p><img src="http://lgx.itengshe.com/20200104135431-1.png" alt=""></p><p>5.看到上面 的一幕，恭喜你，已经成功了，我们再进一步验证一下，</p><p><img src="http://lgx.itengshe.com/20200104135552-1.png" alt=""></p><p>目录下多了一个out文件夹，out文件生成了我们所命名的index.js</p><p><img src="http://lgx.itengshe.com/20200104135604-1.png" alt=""></p><p>打开内容如下</p><p><img src="http://lgx.itengshe.com/20200104135615-1.png" alt=""></p><p>打开index.html文件，结果不仅打印出html文件中的”hello world”，js中的打印123也生效了</p><p>(ps：这里打印中文时假如出现乱码，记得在html文件的<head>标签添加编码<meta charset="utf-8">)</p><p><img src="http://lgx.itengshe.com/20200104135627-1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天想了解一下webpack，但找了网上的一系列教程，都会或多或少出现一些不明报错，实在恼火，经过几番简化，终于用最简单的方法使用了webpack，在此记录一下&lt;/p&gt;
    
    </summary>
    
    
      <category term="javaScripts" scheme="http://yoursite.com/categories/javaScripts/"/>
    
      <category term="前端" scheme="http://yoursite.com/categories/javaScripts/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
</feed>
