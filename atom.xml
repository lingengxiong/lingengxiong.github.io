<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>呵呵到天亮</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-27T07:46:19.389Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lingengxiong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git笔记</title>
    <link href="http://yoursite.com/2020/03/27/git%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/03/27/git%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-27T07:46:19.389Z</published>
    <updated>2020-03-27T07:46:19.389Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设置用户名、密码"><a href="#设置用户名、密码" class="headerlink" title="设置用户名、密码"></a>设置用户名、密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br><span class="line"></span><br><span class="line">git remote  &#x2F;&#x2F;查看远程库信息</span><br><span class="line">git remote -v显示更详细的信息</span><br></pre></td></tr></table></figure><h3 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add readme.txt</span><br><span class="line">git commit -m &quot;message&quot;</span><br></pre></td></tr></table></figure><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git status  告诉你有文件被修改过</span><br><span class="line">git diff   可以查看修改内容。</span><br><span class="line">git diff HEAD -- readme.txt 查看工作区与版本库最新版的区别</span><br><span class="line">git log   命令显示从最近到最远的提交日志，</span><br><span class="line">git log --pretty&#x3D;oneline  一行显示</span><br></pre></td></tr></table></figure><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^   &#x2F;&#x2F;回退到上一版本</span><br><span class="line">git reset --hard commit_id   &#x2F;&#x2F;回退到指定版本</span><br></pre></td></tr></table></figure><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- file  &#x2F;&#x2F;丢弃工作区修改</span><br><span class="line">git reset HEAD &lt;file&gt;  &#x2F;&#x2F;缓存区回退到工作去</span><br><span class="line">如果修改已经提交到版本区，使用版本回退</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.rm test.txt  &#x2F;&#x2F;删除本地工作去文件   （误删可用git checkout --test.txt把误删的文件恢复到最新版本)</span><br><span class="line">b.git rm test.txt &#x2F;&#x2F;删除版本库文件</span><br><span class="line">d.git commit -m &lt;message&gt;</span><br></pre></td></tr></table></figure><h3 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.生成ssh key:  $ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br><span class="line"></span><br><span class="line">2.git remote add origin git@github.com:michaelliao&#x2F;learngit.git   要关联一个远程库</span><br><span class="line"></span><br><span class="line">3.$ git push -u origin master  本地库的所有内容推送到远程库上：由于远程库是空的，我们第一次推送master分支时，加上了-u参数</span><br><span class="line">git push origin master推送最新修改</span><br></pre></td></tr></table></figure><h3 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> git clone git@github.com:lingengxiong&#x2F;testAgain.git</span><br><span class="line"></span><br><span class="line">（还可以用https:&#x2F;&#x2F;github.com&#x2F;michaelliao&#x2F;gitskills.git这样的地址。实际上，Git支持多种协议，默认的git:&#x2F;&#x2F;使用ssh，但也可以使用https等其他协议。）</span><br></pre></td></tr></table></figure><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h3 id="查看分支："><a href="#查看分支：" class="headerlink" title="查看分支："></a>查看分支：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h3 id="创建分支："><a href="#创建分支：" class="headerlink" title="创建分支："></a>创建分支：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;name&gt;</span><br></pre></td></tr></table></figure><h3 id="切换分支："><a href="#切换分支：" class="headerlink" title="切换分支："></a>切换分支：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;name&gt;</span><br></pre></td></tr></table></figure><h3 id="创建-切换分支："><a href="#创建-切换分支：" class="headerlink" title="创建+切换分支："></a>创建+切换分支：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;name&gt;</span><br></pre></td></tr></table></figure><h3 id="合并某分支到当前分支："><a href="#合并某分支到当前分支：" class="headerlink" title="合并某分支到当前分支："></a>合并某分支到当前分支：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;name&gt;</span><br></pre></td></tr></table></figure><h3 id="删除分支："><a href="#删除分支：" class="headerlink" title="删除分支："></a>删除分支：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;name&gt;</span><br><span class="line">git branch -D &lt;name&gt;  &#x2F;&#x2F;强行删除未合并的分支</span><br></pre></td></tr></table></figure><h3 id="查看分支合并情况"><a href="#查看分支合并情况" class="headerlink" title="查看分支合并情况"></a>查看分支合并情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph --pretty&#x3D;oneline --abbrev-commit</span><br></pre></td></tr></table></figure><h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --no-ff -m &quot;merge with no-ff&quot; dev              --no-ff参数，表示禁用Fast forward</span><br></pre></td></tr></table></figure><h3 id="保存工作现场"><a href="#保存工作现场" class="headerlink" title="保存工作现场"></a>保存工作现场</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><h3 id="查看现场保存情况"><a href="#查看现场保存情况" class="headerlink" title="查看现场保存情况"></a>查看现场保存情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure><h3 id="回复现场"><a href="#回复现场" class="headerlink" title="回复现场"></a>回复现场</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br><span class="line">git stash apply stash@&#123;0&#125; 多次stash,恢复时，指定stash</span><br></pre></td></tr></table></figure><h3 id="创建远程origin的dev分支到本地"><a href="#创建远程origin的dev分支到本地" class="headerlink" title="创建远程origin的dev分支到本地"></a>创建远程origin的dev分支到本地</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev origin&#x2F;dev</span><br></pre></td></tr></table></figure><h3 id="指定本地dev分支与远程origin-dev分支的链接"><a href="#指定本地dev分支与远程origin-dev分支的链接" class="headerlink" title="指定本地dev分支与远程origin/dev分支的链接"></a>指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to&#x3D;origin&#x2F;dev dev</span><br></pre></td></tr></table></figure><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">因此，多人协作的工作模式通常是这样：</span><br><span class="line"></span><br><span class="line">首先，可以试图用git push origin &lt;branch-name&gt;推送自己的修改；</span><br><span class="line"></span><br><span class="line">如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</span><br><span class="line"></span><br><span class="line">如果合并有冲突，则解决冲突，并在本地提交；</span><br><span class="line"></span><br><span class="line">没有冲突或者解决掉冲突后，再用git push origin &lt;branch-name&gt;推送就能成功！</span><br><span class="line"></span><br><span class="line">如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to &lt;branch-name&gt; origin&#x2F;&lt;branch-name&gt;。</span><br></pre></td></tr></table></figure><h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;name&gt;  &#x2F;&#x2F;如git tag v1.0</span><br></pre></td></tr></table></figure><h3 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><h3 id="补打标签"><a href="#补打标签" class="headerlink" title="补打标签"></a>补打标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty&#x3D;oneline --abbrev-commit  &#x2F;&#x2F;查看历史提交的commit id</span><br><span class="line">git tag v0.9 f52c633</span><br><span class="line"></span><br><span class="line">git tag -a v0.1 -m &quot;version 0.1 released&quot; 1094adb  &#x2F;&#x2F;创建带有说明的标签，用-a指定标签名，-m指定说明文字</span><br><span class="line">git show &lt;tagname&gt;可以看到说明文字</span><br></pre></td></tr></table></figure><h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v0.1</span><br><span class="line"></span><br><span class="line">git push origin :refs&#x2F;tags&#x2F;v0.9  &#x2F;&#x2F;从远程删除</span><br></pre></td></tr></table></figure><h3 id="推送标签"><a href="#推送标签" class="headerlink" title="推送标签"></a>推送标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;tagname&gt;</span><br><span class="line"></span><br><span class="line">git push origin --tags  &#x2F;&#x2F;一次性推送全部尚未推送到远程的本地标签</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;设置用户名、密码&quot;&gt;&lt;a href=&quot;#设置用户名、密码&quot; class=&quot;headerlink&quot; title=&quot;设置用户名、密码&quot;&gt;&lt;/a&gt;设置用户名、密码&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Shader学习3——数学</title>
    <link href="http://yoursite.com/2020/03/14/Shader%E5%AD%A6%E4%B9%A01_%E5%88%9D%E8%AF%86%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    <id>http://yoursite.com/2020/03/14/Shader%E5%AD%A6%E4%B9%A01_%E5%88%9D%E8%AF%86%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/</id>
    <published>2020-03-14T14:22:14.000Z</published>
    <updated>2020-03-27T07:53:39.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-初识计算机图形学"><a href="#一-初识计算机图形学" class="headerlink" title="一. 初识计算机图形学"></a>一. 初识计算机图形学</h2><h3 id="图形与图形"><a href="#图形与图形" class="headerlink" title="图形与图形"></a>图形与图形</h3><ul><li>图像纯指计算机内以位图（Bitmap)形式存在的灰度信息</li><li>图形含有几何属性，更强调场景的几何表示，是场景几何模型和景物的物理属性共同组成的</li><li>图形主要分成两类：<ul><li>基于线条信息表示</li><li>明暗图（Shading）</li></ul></li></ul><h3 id="GPU-流水线"><a href="#GPU-流水线" class="headerlink" title="GPU 流水线"></a>GPU 流水线</h3><h4 id="1-渲染管线"><a href="#1-渲染管线" class="headerlink" title="1. 渲染管线"></a>1. 渲染管线</h4><p>顶点着色器 —&gt; 光栅化 —&gt; 片段着色器 —&gt; alpha测试 —&gt;  模板测试 —&gt; 深度测试 —&gt; Blend —&gt; Gbuffer —&gt; frontBuffer —&gt; frame buffer —&gt;显示器</p><h5 id="1-1-顶点着色器"><a href="#1-1-顶点着色器" class="headerlink" title="1.1 顶点着色器"></a>1.1 顶点着色器</h5><ul><li>流水线的第一个阶段，输入来自CPU</li><li>处理单位为顶点，即输入的每个顶点都会调用一次顶点着色器</li><li>顶点着色器本身无法创建或者销毁任何顶点，也无法得到顶点之间的关系，例如无法知道两个顶点是否属于同一个三角网格</li><li>所以GPU可以并行处理每一个顶点，故此阶段处理速度很快</li></ul><p>主要工作：坐标转换和逐顶点光照</p><h5 id="1-2-光栅化"><a href="#1-2-光栅化" class="headerlink" title="1.2 光栅化"></a>1.2 光栅化</h5><p>​    将顶点转成像素</p><h5 id="1-3-片段着色器"><a href="#1-3-片段着色器" class="headerlink" title="1.3 片段着色器"></a>1.3 片段着色器</h5><ul><li>纹理采样，从纹理像素 赋给顶点生成的像素</li><li>像素跟灯光计算</li></ul><h5 id="1-4-Alpha-测试"><a href="#1-4-Alpha-测试" class="headerlink" title="1.4 Alpha 测试"></a>1.4 Alpha 测试</h5><p>​    挑选合格的alpha 像素显示</p><h5 id="1-5-模板测试"><a href="#1-5-模板测试" class="headerlink" title="1.5 模板测试"></a>1.5 模板测试</h5><p>​    像素可携带模板信息，达到模板条件的显示出来</p><h5 id="1-6-深度测试"><a href="#1-6-深度测试" class="headerlink" title="1.6 深度测试"></a>1.6 深度测试</h5><p>​    符合条件的像素通过，否则丢弃</p><h5 id="1-7-Blend"><a href="#1-7-Blend" class="headerlink" title="1.7 Blend"></a>1.7 Blend</h5><p>​    将当前要渲染的像素和已经渲染出来的像素混合运算</p><h5 id="1-8-GBuffer"><a href="#1-8-GBuffer" class="headerlink" title="1.8 GBuffer"></a>1.8 GBuffer</h5><p>​    RGBA、 模板值 、深度值等</p><h5 id=""><a href="#" class="headerlink" title=" "></a> </h5><h4 id="2-屏幕坐标系"><a href="#2-屏幕坐标系" class="headerlink" title="2.屏幕坐标系"></a>2.屏幕坐标系</h4><p>屏幕坐标系在OpenGL和DirectX之间存在差异：</p><ul><li>OpenGL把屏幕<strong>左下角</strong>当成最小的窗口坐标</li><li>DirectX则把屏幕<strong>左上角</strong>当成最小的窗口坐标</li></ul><p><img src="http://lgx.itengshe.com/20200308223644-1.png" alt=""></p><h3 id="GPU编程语言"><a href="#GPU编程语言" class="headerlink" title="GPU编程语言"></a>GPU编程语言</h3><h4 id="GLSL"><a href="#GLSL" class="headerlink" title="GLSL"></a>GLSL</h4><p>OpenGL Shading Language</p><p>优点：有较好的跨平台性，可在Windows、Linux、Mac甚至移动平台等多种平台上工作</p><p>原因：跨平台性是由于OpenGL没有提供着色器编译器，而是由<strong>显卡驱动</strong>来完成着色器的编译工作，也就是说只要显卡驱动支持GLSL的编译，就能运行它，它依赖硬件，而非系统层级</p><p>缺点：因为编译结果取决于供应商，供应商编译实现不尽相同，所以存在编译结果不一致的情况。</p><h4 id="HLSL"><a href="#HLSL" class="headerlink" title="HLSL"></a>HLSL</h4><p>High Level Shading Language，DirectX</p><p>由微软控制着色器的编译，即使不同的硬件，同一着色器的编译结果相同，故而支持HLSL的平台相对有限，几乎都是微软自己的产品，其他平台没有可以编译HLSL的编译器。</p><h4 id="CG"><a href="#CG" class="headerlink" title="CG"></a>CG</h4><p>C for Graphic</p><p>真正意义上的跨平台，会根据平台的不同，编译成相同的中间语言，因为它和微软合作，导致CG语言的语法和HLSL非常相似。CG语言可以无缝移植成HLSL代码。</p><h3 id="固定管线渲染"><a href="#固定管线渲染" class="headerlink" title="固定管线渲染"></a>固定管线渲染</h3><p>固定函数的流水线(Fixed-Function Pipeline)，也称固定管线，指在较旧的GPU上实现的渲染流水线，这种流水线只给开发者提供一些配置操作，开发者没有对流水线阶段的完全控制权。</p><p>固定管线通常只提供一系列接口，接口包含一个函数入口点，这些函数入口点匹配GPU上的特定逻辑功能，开发者通过这些接口来控制渲染流水线。</p><p><strong>标注：</strong>已逐渐弃用，不建议继续使用</p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p>NDC：归一化设备坐标(Normalized Device Coordinates)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-初识计算机图形学&quot;&gt;&lt;a href=&quot;#一-初识计算机图形学&quot; class=&quot;headerlink&quot; title=&quot;一. 初识计算机图形学&quot;&gt;&lt;/a&gt;一. 初识计算机图形学&lt;/h2&gt;&lt;h3 id=&quot;图形与图形&quot;&gt;&lt;a href=&quot;#图形与图形&quot; class=&quot;
      
    
    </summary>
    
    
    
      <category term="Unity Shader" scheme="http://yoursite.com/tags/Unity-Shader/"/>
    
  </entry>
  
  <entry>
    <title>Shader学习3——数学</title>
    <link href="http://yoursite.com/2020/03/14/Shader%E5%AD%A6%E4%B9%A03_%E6%95%B0%E5%AD%A6/"/>
    <id>http://yoursite.com/2020/03/14/Shader%E5%AD%A6%E4%B9%A03_%E6%95%B0%E5%AD%A6/</id>
    <published>2020-03-14T14:22:14.000Z</published>
    <updated>2020-03-27T07:52:07.407Z</updated>
    
    <content type="html"><![CDATA[<h2 id="笛卡尔坐标系"><a href="#笛卡尔坐标系" class="headerlink" title="笛卡尔坐标系"></a>笛卡尔坐标系</h2><h3 id="1-二维笛卡尔坐标系"><a href="#1-二维笛卡尔坐标系" class="headerlink" title="1. 二维笛卡尔坐标系"></a>1. 二维笛卡尔坐标系</h3><p>其实我们小学就开始接触的二维坐标系就是笛卡尔坐标系，只是我们当时并不知道这个名字而已。</p><p><img src="https://gitee.com/lingengxiong/blogImage/raw/master/img/20200313232753.png" alt=""></p><p>x轴和y轴互相垂直，也称为该坐标系的基矢量。</p><p>在OpenGL和DirectX中使用了不同的二维笛卡尔坐标系</p><p><img src="https://gitee.com/lingengxiong/blogImage/raw/master/img/20200314224903.png" alt=""></p><h3 id="2-三维笛卡尔坐标系"><a href="#2-三维笛卡尔坐标系" class="headerlink" title="2. 三维笛卡尔坐标系"></a>2. 三维笛卡尔坐标系</h3><p>三维笛卡尔坐标系中，需要定义三个坐标轴和一个原点，如下图：</p><p><img src="https://gitee.com/lingengxiong/blogImage/raw/master/img/20200314225240.png" alt=""></p><p>这三个坐标轴也称为基矢量(basis vector)，通常三个坐标轴是互相垂直的，而且长度为1，这样的基矢量称为<strong>标准正交基</strong>。假如长度不为1，这样的基矢量称为<strong>正交基</strong>。</p><h3 id="3-左手坐标系、右手坐标系"><a href="#3-左手坐标系、右手坐标系" class="headerlink" title="3. 左手坐标系、右手坐标系"></a>3. 左手坐标系、右手坐标系</h3><p>笛卡尔三维坐标系又分为左手坐标系和右手坐标系</p><p><img src="https://gitee.com/lingengxiong/blogImage/raw/master/img/20200315140313.png" alt=""></p><h3 id="4-Unity使用的坐标系"><a href="#4-Unity使用的坐标系" class="headerlink" title="4. Unity使用的坐标系"></a>4. Unity使用的坐标系</h3><ul><li><p>在<strong>模型空间</strong>和<strong>世界空间</strong>中，Unity使用的是左手坐标系</p></li><li><p>对于<strong>观察空间</strong>来说，Unity使用的是右手坐标系。</p><p><strong>观察空间</strong>，就是摄像机为原点的坐标系，此坐标系中，摄像机前向是z轴的负方向，也就是说，z轴坐标减少，场景深度增加。</p><p><img src="https://gitee.com/lingengxiong/blogImage/raw/master/img/20200315141205.png" alt=""></p></li></ul><h2 id="矢量"><a href="#矢量" class="headerlink" title="矢量"></a>矢量</h2><h3 id="1-矢量与点"><a href="#1-矢量与点" class="headerlink" title="1. 矢量与点"></a>1. 矢量与点</h3><p>点(point)是n维空间中的一个位置，没有大小与宽度。</p><p>矢量(vector，也称向量)，是指在n维空间一种包含<strong>模</strong>和<strong>方向</strong>的有向线段。</p><ul><li>矢量的模，指的是矢量的长度，是一个任意非负数</li><li>矢量的方法，指描述了这个矢量在空间中的指向</li></ul><p>表示方法：</p><ul><li>二维矢量：v = (x, y)</li><li>三维矢量： v = (x, y, z)</li><li>四维矢量： v = (x, y, z, w)</li></ul><h3 id="2-矢量计算"><a href="#2-矢量计算" class="headerlink" title="2. 矢量计算"></a>2. 矢量计算</h3><ol><li><p>矢量与标量的乘除法</p><p>乘法：只需要把矢量的每个分量都与标量相乘。</p><script type="math/tex; mode=display">kv = (kv_x, kv_y, kv_z)</script><p>除法：等同于和这个标量的倒数相乘</p><script type="math/tex; mode=display">\frac vk = \frac {(x,y,z)}k = \frac 1k (x,y,z) = \left( \frac xk, \frac yk, \frac zk \right), k\neq 0</script></li><li><p>矢量加减法</p><p>两矢量进行相加减，结果为一个相同维度的新矢量。计算过程中只需要两矢量的相应分量进行相加减即可：</p><script type="math/tex; mode=display">a+b = (a_x+b_x,a_y+b_y,a_z+b_z)</script></li></ol><p><strong>注意：</strong>矢量不可以跟标量相加减，或者和不同维度的矢量进行运算。</p><h3 id="3-矢量的模"><a href="#3-矢量的模" class="headerlink" title="3. 矢量的模"></a>3. 矢量的模</h3><p>矢量的模式一个标量，可理解为矢量在空间中的长度。三维矢量的模计算公式如下：</p><script type="math/tex; mode=display">|v| = \sqrt{v_x^2+v_y^2+v_z^2}</script><p>其他维度的模计算类似，都是对每个分量平方后相加再开根号。</p><h3 id="4-单位矢量"><a href="#4-单位矢量" class="headerlink" title="4. 单位矢量"></a>4. 单位矢量</h3><p>单位矢量指模为1的矢量，也称为<strong>被归一化的矢量</strong>，非零矢量转为单位矢量的过程称为<strong>归一化</strong>。</p><p>矢量归一化公式：</p><script type="math/tex; mode=display">\hat v = \frac v{|v|}</script><p><strong>零矢量</strong>：每个分量都是0，如v = (0,0,0)，零矢量是不可以被归一化的。</p><h3 id="5-矢量的点积"><a href="#5-矢量的点积" class="headerlink" title="5. 矢量的点积"></a>5. 矢量的点积</h3><p>矢量的乘法有两种常用的种类：</p><ul><li>点积，也称内积</li><li>叉积，也称外积</li></ul><p>两矢量的点积是把矢量对应分量相乘后再取和，最终得到一个标量。</p><p>公式一：</p><script type="math/tex; mode=display">a \cdot b = (a_x,a_y,a_z) \cdot (b_x,b_y,b_z) = a_xb_x+a_xb_y+a_zb_z</script><p>点积的几何意义：<strong>投影(projection)</strong></p><p>点积的性质：</p><ul><li><p>性质1：点积可结合标量乘法$(ka)·b = a \cdot (kb) = k(a \cdot b)$</p><p>也就是说点积对一个矢量进行缩放，相当于对最后的结果进行缩放</p></li><li><p>性质2：点积可结合矢量加法和减法</p><script type="math/tex; mode=display">a \cdot (b+c) = a \cdot b + a\cdot c</script></li><li><p>性质3：一个矢量和自身进行点积的结果，是该矢量的模的平方</p><script type="math/tex; mode=display">v\cdot v = |v|^2</script></li></ul><h3 id="6-矢量的叉积"><a href="#6-矢量的叉积" class="headerlink" title="6. 矢量的叉积"></a>6. 矢量的叉积</h3><p>矢量的叉积的结果仍然是一个矢量。叉积公式如下：</p><script type="math/tex; mode=display">a \times b = (a_x,a_y,a_z) \times (b_x,b_y,b_z) = (a_yb_z-a_zb_y,a_zb_x-a_xb_z,a_xb_y-a_yb_x)</script><p>叉积不满足交换律，即$ a \times b \neq b\times a$，但是实际上 $a \times b = - (b\times a)$</p><p>叉积不满足结合律，即$(a \times b)\times c \neq a \times (b \times c)$</p><p>几何意义：对两个矢量进行叉积的结果会得到一个同时垂直于这两个矢量的新矢量。</p><p>应用：计算一个垂直于一个平面、三角形的矢量。</p><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><h3 id="1-矩阵运算"><a href="#1-矩阵运算" class="headerlink" title="1. 矩阵运算"></a>1. 矩阵运算</h3><h4 id="1-1-矩阵和标量的乘法"><a href="#1-1-矩阵和标量的乘法" class="headerlink" title="1.1 矩阵和标量的乘法"></a>1.1 矩阵和标量的乘法</h4><script type="math/tex; mode=display">kM = Mk = k \left[ \begin{matrix}     m_{11}&m_{12}&m_{13}\\    m_{21}&m_{22}&m_{23}\\    m_{31}&m_{32}&m_{33}\\\end{matrix} \right]= \left[ \begin{matrix}     km_{11}&km_{12}&km_{13}\\    km_{21}&km_{22}&km_{23}\\    km_{31}&km_{32}&km_{33}\\\end{matrix} \right]</script><h4 id="1-2-矩阵和矩阵的乘法"><a href="#1-2-矩阵和矩阵的乘法" class="headerlink" title="1.2 矩阵和矩阵的乘法"></a>1.2 矩阵和矩阵的乘法</h4><p>两矩阵的乘法结果是一个新的矩阵，维度跟两个矩阵维度相关。</p><p>矩阵A为r x n的矩阵，矩阵B为n x c的矩阵。AB将是r x c大小的矩阵。</p><p><strong>注意</strong>：第一个矩阵的<strong>列数</strong>必须等于第二个矩阵的<strong>行数</strong>，结果为第一个矩阵的行数，第二个矩阵的列数</p><p>矩阵A跟矩阵B相乘，结果得到矩阵C，C中的每个元素$c_{ij}$,由A中的第i行和B中的第j列，相乘后相加，即：</p><script type="math/tex; mode=display">c_{ij} = a_{i1}b_{1j}+a_{i2}b_{2j}+ ... + a_{in}b_{nj} = \sum_{k=1}^n a_{ik}b_{kj}</script><p>例如：</p><script type="math/tex; mode=display">A= \left[ \begin{matrix}         a_{11}&a_{12}\\        a_{21}&a_{22}\\        a_{31}&a_{32}\\    \end{matrix} \right]</script><script type="math/tex; mode=display">B = \left[ \begin{matrix}         b_{11}&b_{12}&b_{13}&b_{14}\\        b_{21}&b_{22}&b_{23}&b_{24}\\    \end{matrix} \right]</script><p>相乘结果C：</p><script type="math/tex; mode=display">C = \left[ \begin{matrix}     c_{11}&c_{12}&c_{13}&c_{14}\\    c_{21}&c_{22}&c_{23}&c_{24}\\    c_{31}&c_{32}&c_{33}&c_{34}\\\end{matrix} \right]</script><p>则$c_{23} = a_{21}b_{13}+a_{22}b_{23}$</p><p>矩阵乘法性质：</p><ol><li><p>性质一：不满足交换律，即$AB \neq BA$</p></li><li><p>性质二：满足结合律，即$(AB)C = A(BC)$</p></li></ol><h3 id="2-特殊矩阵"><a href="#2-特殊矩阵" class="headerlink" title="2. 特殊矩阵"></a>2. 特殊矩阵</h3><p>在Shader中经常见到的特殊矩阵，这些矩阵往往具有一些重要的性质。</p><h4 id="2-1-方块矩阵"><a href="#2-1-方块矩阵" class="headerlink" title="2.1 方块矩阵"></a>2.1 方块矩阵</h4><p>简称方阵，指行数和列数相等的矩阵。三维渲染中最常见的就是$3 \times 3$和$4 \times 4$的方阵。</p><p><strong>角元素</strong>：行号跟列号相等的元素，如$m_{11}$,$m_{22}$等。因为这些元素排在正方形的对角线上，故而称为角元素。</p><p><strong>对角矩阵</strong>：除了角元素外的所有元素都是0，这样的矩阵称为<strong>对角矩阵</strong>。如：</p><script type="math/tex; mode=display">\left[ \begin{matrix}     1&0&0&0\\    0&2&0&0\\    0&0&3&0\\    0&0&0&4\\\end{matrix} \right]</script><h4 id="2-2-单位矩阵"><a href="#2-2-单位矩阵" class="headerlink" title="2.2 单位矩阵"></a>2.2 单位矩阵</h4><p>对角元素都为1的对角矩阵，称为单位矩阵(identity matrix)，用$I_n$来表示，如：</p><script type="math/tex; mode=display">\left[ \begin{matrix}     1&0&0&0\\    0&1&0&0\\    0&0&1&0\\    0&0&0&1\\\end{matrix} \right]</script><p>与单位矩阵相乘的矩阵，结果还是原来的矩阵，这就是单位矩阵名字的由来。即：</p><script type="math/tex; mode=display">MI = IM = M</script><h4 id="2-3-转置矩阵"><a href="#2-3-转置矩阵" class="headerlink" title="2.3 转置矩阵"></a>2.3 转置矩阵</h4><p>转置矩阵其实是对原矩阵的一种运算，即转置运算。例如$r \times c$的矩阵M，它的转置矩阵为$M^T$,$M^T$为一个$c \times r$的矩阵。</p><script type="math/tex; mode=display">M_{ij}^T = M_{ji}</script><p>例如：</p><script type="math/tex; mode=display">\left[ \begin{matrix}     1&2&3&4\\    5&6&7&8\\\end{matrix} \right]^T =\left[ \begin{matrix}     1&5\\    2&6\\    3&7\\    4&8\\\end{matrix} \right]</script><p>转置矩阵性质：</p><ol><li><p>性质一：矩阵转置的转置等于原矩阵，即</p><script type="math/tex; mode=display">(M^T)^T = M</script></li><li><p>矩阵串接的转置，等于反向串接各个矩阵的转置。</p><script type="math/tex; mode=display">(AB)^T = B^TA^T</script></li></ol><h4 id="2-4-逆矩阵"><a href="#2-4-逆矩阵" class="headerlink" title="2.4 逆矩阵"></a>2.4 逆矩阵</h4><p>逆矩阵是一种特俗的<strong>方阵</strong>，它的特殊之处在于原矩阵和其逆矩阵相乘，结果为一个单位矩阵，例如矩阵M，其逆矩阵未$M^{-1}$</p><script type="math/tex; mode=display">MM^{-1} = M^{-1}M = I</script><p>不是所有方阵都有对应的逆矩阵，例如元素都为0的矩阵就不存在逆矩阵(因为相乘都为0)。</p><p>矩阵有对应逆矩阵，我们称该矩阵是<strong>可逆的</strong>，或者<strong>非奇异的</strong>，没有逆矩阵的则称为<strong>不可逆的</strong>，或者<strong>奇异的</strong>。</p><p>逆矩阵性质：</p><ol><li><p>性质一：逆矩阵的逆矩阵还是原来的矩阵本身</p><script type="math/tex; mode=display">(M^{-1})^{-1} = M</script></li><li><p>性质二：单位矩阵的逆矩阵是它本身。</p><script type="math/tex; mode=display">I^{-1} = I</script></li><li><p>性质三：转置矩阵的逆矩阵是逆矩阵的转置</p><script type="math/tex; mode=display">(M^T)^{-1} = (M^{-1})^T</script></li><li><p>性质四：矩阵串接相乘后的逆矩阵等于反向串接各个矩阵的逆矩阵。</p><script type="math/tex; mode=display">(AB)^{-1} = B^{-1}A^{-1}</script></li></ol><h4 id="2-5-正交矩阵"><a href="#2-5-正交矩阵" class="headerlink" title="2.5 正交矩阵"></a>2.5 正交矩阵</h4><p>正交是矩阵的一种属性，如果一个方阵M和它的转置矩阵的成绩是单位矩阵的话，则称这个矩阵是正交的，即</p><script type="math/tex; mode=display">MM^T = M^TM = I</script><p>这个式子跟逆矩阵公式：$MM^{-1} = M^{-1}M = I$ 很相似，两个公式结合就能得到一个重要的性质，即如果一个矩阵是正交的，那么他的转置矩阵和逆矩阵是一样的。也就是说</p><script type="math/tex; mode=display">M^T = M^{-1}</script><h2 id="矩阵的几何意义-变换"><a href="#矩阵的几何意义-变换" class="headerlink" title="矩阵的几何意义:变换"></a>矩阵的几何意义:变换</h2><h3 id="1-变换"><a href="#1-变换" class="headerlink" title="1. 变换"></a>1. 变换</h3><p>变换(transform)，指把数据通过某种方式进行转换的过程，这些数据可以是点、方向甚至颜色等。</p><p><strong>线性变换</strong>：那些可以保留矢量加和标量乘的变换。</p><script type="math/tex; mode=display">f(x)+f(y) = f(x+y)</script><script type="math/tex; mode=display">kf(x) = f(kx)</script><p>常见的线性变换：缩放(scale)、旋转(rotation)、错切(shear)、镜像(morroring，也称reflection)、正交投影(orthographic projection)</p><h3 id="2-齐次坐标"><a href="#2-齐次坐标" class="headerlink" title="2. 齐次坐标"></a>2. 齐次坐标</h3><p>齐次坐标就是把n维向量，用n+1维向量表示。齐次坐标只是为了方便计算的一种表示方式而已。</p><p>例如：3*3矩阵不能表示平移操作，拓展到4*4就能实现。</p><p>如何将三维矢量变成四维矢量？</p><ul><li>对于一个点，只需要把其w分量设为1；</li><li>对于方向矢量来说，需要把其w分量设为0；</li></ul><p>这样操作后，用4*4的矩阵对<strong>一个点</strong>进行变换时，平移、旋转、缩放都会施加于该点</p><p>对一个方向矢量进行变换时，将不起作用。</p><h3 id="3-分解基础变换矩阵"><a href="#3-分解基础变换矩阵" class="headerlink" title="3. 分解基础变换矩阵"></a>3. 分解基础变换矩阵</h3><p>4*4的矩阵能表示平移、旋转和缩放。我们把表示纯平移、纯旋转和纯缩放的变换叫做基础变换矩阵。基础变换矩阵分解如下：</p><script type="math/tex; mode=display">\left[  \begin{matrix} M_{3\times3}&t_{3\times1}\\ 0_{1\times3}&1 \end{matrix}\right]</script><ul><li>$M_{3\times 3}$用于表示旋转和缩放</li><li>$t_{3*3}$用于表示平移</li><li>$0_{1*3} = \left[<br> \begin{matrix}<br> 0&amp;0&amp;0\\<br> \end{matrix}<br>\right] $ </li><li>右下角是标量1</li></ul><h3 id="4-平移矩阵"><a href="#4-平移矩阵" class="headerlink" title="4. 平移矩阵"></a>4. 平移矩阵</h3><ul><li><p>我们可以用矩阵乘法来对<strong>一个点</strong>（x,y,z）进行平移变换：</p><p>该点齐次坐标为(x,y,z,1)</p></li></ul><script type="math/tex; mode=display">\left[  \begin{matrix} 1&0&0&t_x\\ 0&1&0&t_y\\ 0&0&1&t_z\\ 0&0&0&1\\ \end{matrix}\right]\left[  \begin{matrix} x\\ y\\ z\\ 1\\ \end{matrix}\right]=\left[  \begin{matrix} x+t_x\\ y+t_y\\ z+t_z\\ 1\\ \end{matrix}\right]</script><p>​        从几何上看，就是把点$(x,y,z)$在空间中移动了$(t_x,t_y,t_z)$个单位。</p><ul><li><p>对一个方向矢量（x,y,z）进行平移变换，结果如下：</p><p>该矢量的齐次坐标为（x,y,z,0）</p></li></ul><script type="math/tex; mode=display">\left[  \begin{matrix} 1&0&0&t_x\\ 0&1&0&t_y\\ 0&0&1&t_z\\ 0&0&0&1\\ \end{matrix}\right]\left[  \begin{matrix} x\\ y\\ z\\ 0\\ \end{matrix}\right]=\left[  \begin{matrix} x\\ y\\ z\\ 0\\ \end{matrix}\right]</script><p>​        可以发现，平移变换不会对方向矢量产生任何影响。</p><p>构建平移矩阵：</p><p>基础变换矩阵中的$t_{3\times 1}$矢量对应了平移矢量，左上角的矩阵$M_{3\times 3}$为单位矩阵$I_3$。</p><p>平移矩阵的逆矩阵就是方向平移得到的矩阵，即</p><script type="math/tex; mode=display">\left[  \begin{matrix} 1&0&0&-t_x\\ 0&1&0&-t_y\\ 0&0&1&-t_z\\ 0&0&0&1\\ \end{matrix}\right]</script><p>可以看出，平移矩阵并不是一个正交矩阵。</p><h3 id="5-缩放矩阵"><a href="#5-缩放矩阵" class="headerlink" title="5. 缩放矩阵"></a>5. 缩放矩阵</h3><p>我们可以对一个模型沿空间的x轴、y轴、z轴进行缩放。矩阵乘法表示如下：</p><script type="math/tex; mode=display">\left[  \begin{matrix} k_x&0&0&0\\ 0&k_y&0&0\\ 0&0&k_z&0\\ 0&0&0&1\\ \end{matrix}\right]\left[  \begin{matrix} x\\ y\\ z\\ 1\\ \end{matrix}\right]=\left[  \begin{matrix} k_xx\\ k_yy\\ k_zz\\ 1\\ \end{matrix}\right]</script><p>对反向矢量进行同样的矩阵进行缩放：</p><script type="math/tex; mode=display">\left[  \begin{matrix} k_x&0&0&0\\ 0&k_y&0&0\\ 0&0&k_z&0\\ 0&0&0&1\\ \end{matrix}\right]\left[  \begin{matrix} x\\ y\\ z\\ 0\\ \end{matrix}\right]=\left[  \begin{matrix} k_xx\\ k_yy\\ k_zz\\ 0\\ \end{matrix}\right]</script><p><strong>统一缩放</strong>：缩放系数$k_x = k_y = k_z$,其余都是<strong>非统一缩放</strong>。<br>缩放矩阵的逆矩阵是使用原缩放系数的倒数来对点或方向矢量进行缩放，即</p><script type="math/tex; mode=display">\left[  \begin{matrix} \frac{1}{k_x}&0&0&0\\ 0&\frac{1}{k_y}&0&0\\ 0&0&\frac{1}{k_z}&0\\ 0&0&0&1\\ \end{matrix}\right]</script><p>缩放矩阵一般不是正交矩阵。</p><h3 id="6-旋转矩阵"><a href="#6-旋转矩阵" class="headerlink" title="6. 旋转矩阵"></a>6. 旋转矩阵</h3><ul><li>把点绕x轴旋转$\theta$度，可以使用下面矩阵：<script type="math/tex; mode=display">R_x(\theta)=\left[ \begin{matrix}1&0&0&0\\0&\cos\theta&-\sin\theta&0\\0&\sin\theta&\cos\theta&0\\0&0&0&1\\\end{matrix}\right]</script></li><li>绕y轴：<script type="math/tex; mode=display">R_y(\theta)=\left[ \begin{matrix}\cos\theta&0&\sin\theta&0\\0&1&0&0\\-\sin\theta&0&\cos\theta&0\\0&0&0&1\\\end{matrix}\right]</script></li><li>绕z轴<script type="math/tex; mode=display">R_z(\theta)=\left[ \begin{matrix}\cos\theta&-\sin\theta&0&0\\\sin\theta&\cos\theta&0&0\\0&0&1&0\\0&0&0&1\\\end{matrix}\right]</script></li></ul><p>旋转矩阵的逆矩阵是旋转相反角度得到的变换矩阵。<br>旋转矩阵是正交矩阵，多个旋转矩阵之间的串联同样是正交的。</p><h3 id="7-复合变换"><a href="#7-复合变换" class="headerlink" title="7. 复合变换"></a>7. 复合变换</h3><p>可以将平移、旋转和缩放进行组合，形成一个复杂的变换过程。例如，可以对模型先缩放(2,2,2),再绕y轴旋转$30^。$，最后向z轴平移4个单位。符合变换可以通过矩阵串联来实现：</p><script type="math/tex; mode=display">P_{new} = M_{translation}M_{rotation}M_{scale}P_{old}(阅读顺序从右往左)</script><p>变换的结果依赖于变换的顺序，矩阵乘法不满足交换律，因此不同的乘法顺序得到的结果不相同。</p><p>约定顺序：先缩放，再旋转，最后平移</p><h2 id="坐标空间"><a href="#坐标空间" class="headerlink" title="坐标空间"></a>坐标空间</h2><h3 id="1-坐标空间的变换"><a href="#1-坐标空间的变换" class="headerlink" title="1. 坐标空间的变换"></a>1. 坐标空间的变换</h3><p>每个空间都有一个父(parent)坐标空间，对坐标空间的变换实际上就是在父空间和子空间对点和矢量进行转换。</p><p>已头晕@@@，之后再补!!!!</p><h3 id="2-模型空间"><a href="#2-模型空间" class="headerlink" title="2. 模型空间"></a>2. 模型空间</h3><p>模型空间(model spacce)，有时也称<strong>对象空间</strong>，或者<strong>局部空间</strong>，每个模型都有自己独立的坐标空间。<br>Unity在模型空间中使用左手坐标系，在此模型空间中，+x轴、+y轴、+z轴分别对应模型的右、上和前向。</p><h3 id="3-世界空间"><a href="#3-世界空间" class="headerlink" title="3. 世界空间"></a>3. 世界空间</h3><p>世界空间(word space)是一个特殊的坐标系，它创建了我们所关心的最大的空间。这里的最大指的是我们所关心的最外层的坐标空间。</p><h3 id="4-观察空间"><a href="#4-观察空间" class="headerlink" title="4. 观察空间"></a>4. 观察空间</h3><p>观察空间(view space),也被称为摄像机空间(camera space)。观察空间可以认为是模型空间的一个特例。</p><p>Unity中观察空间的坐标轴选择：+x轴指向右方，+y轴指向上方，+z轴指向的是摄像机的后方。</p><p>Unity中观察空间使用的是右手坐标系，在这样的空间中，摄像机的正前方指向的是-z轴的方向。</p><p><strong>注意：</strong>观察空间和屏幕空间不同，观察空间是三维空间，屏幕空间是二维空间。之间的转换需要进行<strong>投影</strong>。</p><p>顶点变换的第二步，是将顶点坐标从世界空间变换到观察空间中，这个变换叫<strong>观察变换</strong>。</p><h3 id="5-裁剪空间"><a href="#5-裁剪空间" class="headerlink" title="5. 裁剪空间"></a>5. 裁剪空间</h3><p>裁剪空间(clip space, 也称为齐次裁剪空间)，用于变换的矩阵叫<strong>裁剪矩阵</strong>，也称投影矩阵。<br>裁剪空间的目标是能够方便地对渲染图元进行裁剪：</p><ul><li>完全在这空间内部的图元完全保留。</li><li>完全在这空间外部的图元完全剔除。</li><li>与这块空间相交的图元就会被裁剪。</li></ul><p>判断一个顶点是否位于视锥体内部，可以通过投影矩阵把顶点转换到一个裁剪空间中。</p><p>以上指的空间由<strong>视锥体</strong>来决定。视锥体指空间中一块区域，这块区域来决定摄像机所能看到的空间。<br>视锥体由六个平面包围而成，这些平面称为<strong>裁剪平面</strong>。如下所示：<br><img src="http://lgx.itengshe.com/20200326153351.png" alt=""></p><p>投影类型：</p><ol><li>正交投影，完全保留物体的距离和角度</li><li>透视投影，模拟人眼看世界的方式，近大远小</li></ol><h3 id="6-屏幕空间"><a href="#6-屏幕空间" class="headerlink" title="6.屏幕空间"></a>6.屏幕空间</h3><p>使用投影矩阵变换后，我们进行了裁剪操作，接下来就需要进行真正的投影。即把视锥体投影到屏幕空间(screen space)。经过这一步，就得到真正的像素位置，而不是虚拟的三维坐标。<br>屏幕空间是二维的空间，故而我们要把顶点从裁剪空间投影到屏幕空间中，来生成对应的2D坐标：<br>  1.首先进行标准的<strong>齐次除法</strong>，也称为<strong>透视除法</strong>，操作很简单，只需要用齐次坐标系中的w分量去除以x,y,z分量。<br>  OpenGL中，这一步得到的坐标称为<strong>归一化设备坐标(Normalized Device Coordinates,NDC)</strong>。<br>  经过投影变换后的裁剪空间，再经过齐次除法后会变换到一个立方体内。</p><ul><li>按OpenGL传统，这个立方体的x,y,z分量的范围都是[-1,1]。Unity选择OpenGL这样的齐次裁剪空间。</li><li><p>在DirectX这样的API中，z分量的范围会是[0,1]。<br><img src="http://lgx.itengshe.com/20200326163633.png" alt=""><br>对于正交投影来说，它的裁剪空间实际已经是一个立方体了，而且经过正交投影矩阵变换后的顶底的w分量是1，因此经过齐次除法不会对x,y,z坐标产生影响。如图所示：<br><img src="http://lgx.itengshe.com/20200326164234.png" alt=""></p><p>2.经过齐次除法后，透视投影和正交投影的视锥体都变换到一个相同的立方体内，接下来就可以根据变换后的x和y坐标来映射输出窗口的对应像素坐标。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;笛卡尔坐标系&quot;&gt;&lt;a href=&quot;#笛卡尔坐标系&quot; class=&quot;headerlink&quot; title=&quot;笛卡尔坐标系&quot;&gt;&lt;/a&gt;笛卡尔坐标系&lt;/h2&gt;&lt;h3 id=&quot;1-二维笛卡尔坐标系&quot;&gt;&lt;a href=&quot;#1-二维笛卡尔坐标系&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
      <category term="Unity Shader" scheme="http://yoursite.com/tags/Unity-Shader/"/>
    
  </entry>
  
  <entry>
    <title>Shader学习3——Unity Shader</title>
    <link href="http://yoursite.com/2020/03/13/Shader%E5%AD%A6%E4%B9%A02_Unity%20Shader/"/>
    <id>http://yoursite.com/2020/03/13/Shader%E5%AD%A6%E4%B9%A02_Unity%20Shader/</id>
    <published>2020-03-13T14:22:14.000Z</published>
    <updated>2020-03-27T07:53:14.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Unity-Shader"><a href="#Unity-Shader" class="headerlink" title="Unity Shader"></a>Unity Shader</h2><h3 id="1-Unity-中的shader"><a href="#1-Unity-中的shader" class="headerlink" title="1. Unity 中的shader"></a>1. Unity 中的shader</h3><h4 id="Shader模板"><a href="#Shader模板" class="headerlink" title="Shader模板"></a>Shader模板</h4><p>Unity为我们提供4种unity Shader 模板</p><ul><li><p><strong>Standard Surface Shader</strong></p><p>产生一个包含了标准光照模型的<strong>表面着色器模板</strong>。</p></li><li><p><strong>Unlit Shader</strong></p><p>产生一个不包含光照（但包含雾效）的基本的<strong>顶点/片元着色器</strong>。</p></li><li><p><strong>Image Effect Shader</strong></p><p>为我们实现各种屏幕后处理效果提供一个基本模板。</p></li><li><p><strong>Compute Shader</strong></p><p>产生一种特殊的Shader文件，这类Shader旨在利用GPU的并行性来进行一些与常规渲染流水线无关的计算。</p></li></ul><h3 id="2-ShaderLab"><a href="#2-ShaderLab" class="headerlink" title="2. ShaderLab"></a>2. ShaderLab</h3><p>Unity中，Unity Shader都是使用ShaderLab来编写，ShaderLab是Unity提供的编写Unity Shader的说明性语言。</p><h4 id="2-1-ShaderLab基础结构"><a href="#2-1-ShaderLab基础结构" class="headerlink" title="2.1 ShaderLab基础结构"></a>2.1 ShaderLab基础结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;ShaderName&quot;&#123;</span><br><span class="line">properties&#123;</span><br><span class="line">&#x2F;&#x2F;属性</span><br><span class="line">&#125;</span><br><span class="line">SubShader&#123;</span><br><span class="line">&#x2F;&#x2F;显卡A使用的子着色器</span><br><span class="line">&#125;</span><br><span class="line">SubShader&#123;</span><br><span class="line">&#x2F;&#x2F;显卡B使用的子着色器</span><br><span class="line">&#125;</span><br><span class="line">Fallback &quot;VertexLit&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Unity在背后会根据使用的平台来把这些结构编译成真正的代码和Shader文件，开发者只需要和Unity Shader打交道。</p><h4 id="2-2-ShaderLab结构详解"><a href="#2-2-ShaderLab结构详解" class="headerlink" title="2.2 ShaderLab结构详解"></a>2.2 ShaderLab结构详解</h4><h5 id="2-2-1-Shader名字"><a href="#2-2-1-Shader名字" class="headerlink" title="2.2.1 Shader名字"></a>2.2.1 Shader名字</h5><p>ShaderLab 文件第一行，指定Shader的名字，通过斜杆(“/”)，可控制Unity Shader在材质面板中的位置，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Custon&#x2F;MyShader&quot;</span><br></pre></td></tr></table></figure><p>则Shader所在位置：</p><p><img src="https://gitee.com/lingengxiong/blogImage/raw/master/img/20200312174616.png" alt=""></p><h5 id="2-2-2-Properties"><a href="#2-2-2-Properties" class="headerlink" title="2.2.2 Properties"></a>2.2.2 Properties</h5><p>Properties语义块包含一些列属性，这些属性会出现在材质面板上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Properties&#123;</span><br><span class="line">Name1(&quot;display name1&quot;, PropertyType1) &#x3D; DefaultValue1</span><br><span class="line">Name2(&quot;display name2&quot;, PropertyType2) &#x3D; DefaultValue2</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性名通常以下划线”_”开头，定义了这些属性后，即可在材质面板调节各种材质属性。使用每个属性的名字(Name) 可在Shader中访问它们。</p><p>每种属性都需要指定类型（PropertyType），以及赋予默认值，常用属性如下：</p><div class="table-container"><table><thead><tr><th style="text-align:left">属性类型</th><th style="text-align:left">默认值定义语法</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">Int</td><td style="text-align:left">number</td><td style="text-align:left">_Int(“Int”, Int) = 2</td></tr><tr><td style="text-align:left">Float</td><td style="text-align:left">number</td><td style="text-align:left">_Float(“Int”, Float) = 2</td></tr><tr><td style="text-align:left">Range(min, max)</td><td style="text-align:left">number</td><td style="text-align:left">_Range(“Range”, Range(0.0, 10.0)) = 1.5</td></tr><tr><td style="text-align:left">Color</td><td style="text-align:left">(number,number,number,number,)</td><td style="text-align:left">_Color(“Color”, Color) = (255,255,255,255)</td></tr><tr><td style="text-align:left">Vector</td><td style="text-align:left">(number,number,number,number,)</td><td style="text-align:left">_Vector(“Vector”, Vector) = (1, 1, 1 ,1)</td></tr><tr><td style="text-align:left">2D</td><td style="text-align:left">“defaulttexture”{}</td><td style="text-align:left">_2D(‘2D’, 2D) = “”{}</td></tr><tr><td style="text-align:left">Cube</td><td style="text-align:left">“defaulttexture”{}</td><td style="text-align:left">_Cube(‘Cube’, Cube= “white”{}</td></tr><tr><td style="text-align:left">3D</td><td style="text-align:left">“defaulttexture”{}</td><td style="text-align:left">_3D(‘3D’, 3D) = “black”{}</td></tr></tbody></table></div><h5 id="2-2-3-SubShader"><a href="#2-2-3-SubShader" class="headerlink" title="2.2.3 SubShader"></a>2.2.3 SubShader</h5><p>每个Unity Shader文件可包含至少一个SubShader。当Unity需要加载这个Unity Shader时，Unity会扫描所有的SubShader语义块，然后选择一个能够在目标平台运行 的SubShader。假如没有一个SubShader支持的话，Unity会使用Fallback语义指定的Unity Shader。</p><p><strong>原因：</strong>不同显卡能力性能不同，比较老的显卡可能支持的操作指令数量较少，高级的显卡可支持的指令数较多，故而我们希望程序能在旧的显卡上运行，又能在高级的显卡上有更好的体验。</p><p>SubShader语义块通常如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SubShader&#123;</span><br><span class="line">&#x2F;&#x2F;可选</span><br><span class="line">[Tags]</span><br><span class="line">&#x2F;&#x2F;可选</span><br><span class="line">[RenderSetup]</span><br><span class="line"></span><br><span class="line">Pass&#123;</span><br><span class="line">&#125;</span><br><span class="line">Pass&#123;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SubShader中定义了一系列Pass以及可选的转态([RendetSetup])和标签([Tags])。每个Pass定义了一次完整的渲染流程，我们应尽量使用小数目Pass，太多Pass会使渲染性能下降。</p><ul><li><p>状态设置</p><p>ShaderLab提供了一系列渲染状态的设置指令，从而设置显卡的各种状态，常用渲染状态如下：</p></li></ul><div class="table-container"><table><thead><tr><th>状态名称</th><th>设置指令</th><th>解释</th></tr></thead><tbody><tr><td>Cull</td><td>Cull Back\</td><td>Front\</td><td>Off</td><td>设置剔除模式：剔除背面/正面/关闭剔除</td></tr><tr><td>ZTest</td><td>ZTest Less Greater\</td><td>LEqual\</td><td>GEqual\</td><td>Equal\</td><td>NotEqual\</td><td>Always</td><td>设置深度测试时使用的函数</td></tr><tr><td>ZWrite</td><td>ZWrite On\</td><td>Off</td><td>开启/关闭深度写入</td></tr><tr><td>Blend</td><td>Blend SrcFactor DstFactor</td><td>开启并设置混合模式</td></tr></tbody></table></div><p>在SubShader块中设置上述渲染状态时，将会应用到所有的Pass，假如不希望这样，只想作用于特定Pass，可以再Pass语义块中单独进行设置。</p><ul><li><p>SubShader的标签</p><p>SubShader的标签(Tags)是一个键值对(Key/Value Pair)，它的键和值都是字符串类型。这些键值对是SubShader和渲染引擎之间的沟通桥梁。它们用来告诉Unity的渲染引擎：SubShader希望如何、以及何时渲染这个对象。</p><p>标签结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tags&#123; &quot;TagName1&quot; &#x3D; &quot;Value1&quot; &quot;TagName2&quot; &#x3D; &quot;Value2&quot;&#125;</span><br></pre></td></tr></table></figure><p>SubShader的标签块支持的标签类型如下：</p><p><img src="https://gitee.com/lingengxiong/blogImage/raw/master/img/20200312231618.png" alt=""></p></li></ul><p><strong>注意：</strong>上述标签只能在SubShader中声明，不能在Pass块中声明。</p><ul><li><p>Pass语义块</p><p>Pass语义块的语义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Pass&#123;</span><br><span class="line">    [Name]</span><br><span class="line">    [Tags]</span><br><span class="line">    [RenderSetup]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>定义Pass名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Name &quot;MyPassName&quot;</span><br></pre></td></tr></table></figure><p>通过这个名字，可以在其他Unity Shader中使用该Pass：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UsePass &quot;MyShader&#x2F;MYPASSNAME&quot;</span><br></pre></td></tr></table></figure><p>这样就提高了代码的发用性，我们可以发现调用的过程中使用了大写的形式，这并不是写错，而是因为Unity内部会把所有的Pass的名称都转成大写，故而我们在使用UsePass时，必须使用大写的形式。</p></li><li><p>Pass标签<br>Pass同样可以设置标签，它的标签不同于SubShader的标签，这些标签也是用于告诉渲染引擎如何来渲染该物体。以下是Pass中使用的标签类型：</p><p>| 标签类型       | 说明                                                         | 例子                                      |<br>| ——————— | —————————————————————————————— | ————————————————————- |<br>| LightMode      | 定义该Pass在Unity的渲染流水线中的角色                        | Tags{“LightMode” = “ForwardBase”}         |<br>| RequireOptions | 用于指定当满足某些条件时才渲染该Pass，它的值是一个由空格分隔的字符串。目前Unity支持的选项有：SoftVegetation | Tags{“RequireOptions” = “SoftVegetation”} |</p><p>除了上面普通的Pass定义外，Unity Shader还支持一些特殊的Pass，以便进行代码复用或者实现更复杂的效果。</p><ul><li>UsePass : 可以使用该命令来复用其他Unity Shader中的Pass。</li><li>GrabPass：该Pass负责抓取屏幕并将结果存储在一张纹理中，用于后续的Pass处理。</li></ul></li></ol><h5 id="2-2-4-Fallback"><a href="#2-2-4-Fallback" class="headerlink" title="2.2.4 Fallback"></a>2.2.4 Fallback</h5><p>在ShaderLab语义块的最后，是一个Fallback指令，它告诉Unity如果上面的所有SubShader在这块显卡都不能运行，就使用这个最低级的Shader！！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Fallback &quot;name&quot;&#x2F;&#x2F;告诉显卡使用哪个Unity Shader</span><br><span class="line">&#x2F;&#x2F;或者</span><br><span class="line">Fallback Off</span><br></pre></td></tr></table></figure><h3 id="3-Unity-Shader的形式"><a href="#3-Unity-Shader的形式" class="headerlink" title="3. Unity Shader的形式"></a>3. Unity Shader的形式</h3><h4 id="3-1-表面着色器"><a href="#3-1-表面着色器" class="headerlink" title="3.1 表面着色器"></a>3.1 表面着色器</h4><p>表面着色器(Surface Shader)是Unity自己创造的一种着色器代码类型。它的代码量很少，但渲染代价比较大。当给Unity提供一个表面着色器的时候，Unity需要在背后做很多工作，把它转换成顶点/片元着色器。</p><p>好处：Unity对顶点/片元着色器更高一层的的抽象，为我们处理很多光照细节，我们不需要操心这些事。</p><p>简单的表面着色器如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Custom&#x2F;Simple Surface Shader&quot;&#123;</span><br><span class="line">SubShader&#123;</span><br><span class="line">Tags&#123;&quot;RenderType&quot; &#x3D; &quot;Opaque&quot;&#125;</span><br><span class="line">CGPROGRAM</span><br><span class="line">#pragma surface surf Lambert</span><br><span class="line">struct Input&#123;</span><br><span class="line">float4 color : COLOR;</span><br><span class="line">&#125;;</span><br><span class="line">void surf(Input IN, input SurfaceOutput 0)&#123;</span><br><span class="line">o.Albedo &#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line">ENDCG</span><br><span class="line">&#125;</span><br><span class="line">Fallback &quot;Diffuse&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的程序中，表面着色器被定义在SubShader语义块中的CGPROGRAM和ENDCG中(而不是Pass中)，因为表面着色器不需要开发者关心使用多少个Pass以及每个Pass如何渲染，这些事情都交给Unity去完成就好了。<br>CGPROGRAM和ENDCG之间的代码是使用CG/HLSL编写的，我们需要把CG/HLSL语言嵌套在ShaderLab语言中<br><strong>注意：</strong>此处的CG/HLSL是Unity封装过的，与标准的CG/HLSL几乎一样，只有细微差别，一些原生的函数可能Unity并没有提供。</p><h4 id="3-2-顶点-片元着色器"><a href="#3-2-顶点-片元着色器" class="headerlink" title="3.2 顶点/片元着色器"></a>3.2 顶点/片元着色器</h4><p>在Unity中，我们可以使用CG/HLSL语言来编写<strong>顶点/片元着色器（Vertex/Fragment Shader）</strong>。它更加复杂，但也更加灵活了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Custom&#x2F;Simple VertexFragement Shader&quot;&#123;</span><br><span class="line">SubShader&#123;</span><br><span class="line">Pass&#123;</span><br><span class="line">CGPROGRAM</span><br><span class="line">#pragma vertex vert</span><br><span class="line">#pragma fragment frag</span><br><span class="line">float4 vert(float4 v:POSITION):SV_POSITION&#123;</span><br><span class="line">return mul(UNITY_MATRIX_MVP, v);</span><br><span class="line">&#125;</span><br><span class="line">float4 frag():AV_Target&#123;</span><br><span class="line">return fixed4(1.0, 0.0, 0.0, 1.0)</span><br><span class="line">&#125;</span><br><span class="line">ENDCG</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码同样写在CGPROGRAM和ENDCG之间，但顶点/片元着色器是写在Pass语义块内的，而不是Subshader内，因为我们需要自己定义每个Pass。因此我们需要编写更多的代码，但也因如此变得灵活性更高，可以控制渲染的实现细节。</p><h4 id="3-3-固定函数着色器"><a href="#3-3-固定函数着色器" class="headerlink" title="3.3 固定函数着色器"></a>3.3 固定函数着色器</h4><p>对于一些比较老旧的设备，它们不支持可编程管线着色器，此时需要使用<strong>固定函数着色器（Fixed Function Shader）</strong>，这样的着色器往往只能完成一些简单的效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Tutorial&#x2F;Basic&quot;&#123;</span><br><span class="line">Properties&#123;</span><br><span class="line">_Color (&quot;Main Color&quot;, Color) &#x3D; (1, 0.5, 0.5, 1)</span><br><span class="line">&#125;</span><br><span class="line">SubShader&#123;</span><br><span class="line">Pass&#123;</span><br><span class="line">Material&#123;</span><br><span class="line">Diffuse [_Color]</span><br><span class="line">&#125;</span><br><span class="line">Lighting On</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于固定函数着色器来说，我们需要完全使用ShaderLab的语法(即使用ShaderLab的渲染设置命令)来编写，而不是CG/HLSL。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Unity-Shader&quot;&gt;&lt;a href=&quot;#Unity-Shader&quot; class=&quot;headerlink&quot; title=&quot;Unity Shader&quot;&gt;&lt;/a&gt;Unity Shader&lt;/h2&gt;&lt;h3 id=&quot;1-Unity-中的shader&quot;&gt;&lt;a href
      
    
    </summary>
    
    
    
      <category term="Unity Shader" scheme="http://yoursite.com/tags/Unity-Shader/"/>
    
  </entry>
  
  <entry>
    <title>lua</title>
    <link href="http://yoursite.com/2020/01/09/lua%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2020/01/09/lua%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2020-01-09T13:51:43.000Z</published>
    <updated>2020-03-17T14:54:06.293Z</updated>
    
    <content type="html"><![CDATA[<p>记录使用lua过程中遇到的问题</p><a id="more"></a><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><h4 id="截去字符串首尾空格"><a href="#截去字符串首尾空格" class="headerlink" title="截去字符串首尾空格"></a>截去字符串首尾空格</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.gsub(str, &quot;^%s*(.-)%s*$&quot;, &quot;%1&quot;)  --截掉前后空格</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录使用lua过程中遇到的问题&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>npm</title>
    <link href="http://yoursite.com/2020/01/03/npm/"/>
    <id>http://yoursite.com/2020/01/03/npm/</id>
    <published>2020-01-03T13:51:43.000Z</published>
    <updated>2020-03-17T14:54:06.294Z</updated>
    
    <content type="html"><![CDATA[<p>记录使用npm过程中遇到的问题，免得再遇到时还到处搜索</p><a id="more"></a><h1 id="配置npm转到淘宝镜像"><a href="#配置npm转到淘宝镜像" class="headerlink" title="配置npm转到淘宝镜像"></a>配置npm转到淘宝镜像</h1><p>安装npm后，默认是使用国外镜像的，所以不翻墙速度简直龟速，使用淘宝镜像就比较快了，切换方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</span><br></pre></td></tr></table></figure><p>且回原来是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npmjs.org&#x2F;</span><br></pre></td></tr></table></figure><p>查看当前npm使用哪个源，则用这个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录使用npm过程中遇到的问题，免得再遇到时还到处搜索&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>hexo笔记</title>
    <link href="http://yoursite.com/2020/01/03/hexo%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/01/03/hexo%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-03T10:51:43.000Z</published>
    <updated>2020-03-17T14:54:06.293Z</updated>
    
    <content type="html"><![CDATA[<p>玩hexo过程中遇到的坑</p><a id="more"></a><p>本文主要参考自 <a href="https://chaooo.github.io/article/20161229.html，主要用来记录hexo搭建的整个过程，方便后面查看。" target="_blank" rel="noopener">https://chaooo.github.io/article/20161229.html，主要用来记录hexo搭建的整个过程，方便后面查看。</a></p><h3 id="1-hexo安装"><a href="#1-hexo安装" class="headerlink" title="1.hexo安装"></a>1.hexo安装</h3><p>在安装<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>之前，必须确认你已经安装了<a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a>和<a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a>。</p><h4 id="1-1-hexo-初始化"><a href="#1-1-hexo-初始化" class="headerlink" title="1.1.hexo 初始化"></a>1.1.hexo 初始化</h4><p>安装 hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>在你想要存放该博客项目的目录下，执行以下命令，这两步都比较耗时，因为要下载许多文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>先预览一下效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>上面命令可简化成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>运行成功后，即可在浏览器输入localhost:4000即可看到效果。</p><h4 id="1-2-部署到远端"><a href="#1-2-部署到远端" class="headerlink" title="1.2.部署到远端"></a>1.2.部署到远端</h4><p>我们这里以gitee码云作为远端进行部署，在根目录下找到_config.yml，添加以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: &#39;git&#39;</span><br><span class="line">  repository:</span><br><span class="line">    #github: git@github.com:lingengxiong&#x2F;lingengxiong.github.io.git</span><br><span class="line">    gitee: git@gitee.com:lingengxiong&#x2F;lingengxiong.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>假如需要部署到多个远端，只需要在repository中配置多个地址即可。</p><p>配置完成后，安装deployer插件，该插件用来将生产的静态文件部署到远端仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装完成即可生产静态文件，继而推送到远端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p><strong>温馨提示：</strong>第一次使用git时会弹出输入框，此时输入git仓库的用户名和密码即可。</p><hr><h3 id="2-hexo-主题安装"><a href="#2-hexo-主题安装" class="headerlink" title="2.hexo 主题安装"></a>2.hexo 主题安装</h3><p>尝试了很多种主题，最后决定用<a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank" rel="noopener">BlueLake</a>，一方面是因为布局功能都很符合自己的需求，另一方面则是挺好看的</p><p><img src="http://lgx.itengshe.com/20200106142713-1.jpg" alt=""></p><h4 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1.安装"></a>2.1.安装</h4><p>安装主题和渲染:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;chaooo&#x2F;hexo-theme-BlueLake.git themes&#x2F;BlueLake</span><br></pre></td></tr></table></figure><p>Blue是基于jade和stylus写的，所有需要安装hexo-renderer-jade和hexo-renderer-stylus</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-renderer-jade@0.3.0 --save</span><br><span class="line">$ npm install hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>切到themes/BlueLake，下载主题所需要的库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd themes&#x2F;BlueLake</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h4 id="2-2-启用主题"><a href="#2-2-启用主题" class="headerlink" title="2.2.启用主题"></a>2.2.启用主题</h4><p>要使用刚下载好的主题，只需要修改根目录下_config.yml配置文件，找到theme字段，修改为BlueLake</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: BuleLake</span><br></pre></td></tr></table></figure><p>依次执行以下命令，然后打开localhost:4000就可以看效果了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="http://lgx.itengshe.com/20200106153336-1.jpg" alt=""></p><h4 id="2-3-配置"><a href="#2-3-配置" class="headerlink" title="2.3 配置"></a>2.3 配置</h4><p>目前的整个工程都还是比较原始的状态，我们的工作就是添加我们自己的东西进去了。</p><h5 id="2-3-1-配置网站头部显示文字"><a href="#2-3-1-配置网站头部显示文字" class="headerlink" title="2.3.1 配置网站头部显示文字"></a>2.3.1 配置网站头部显示文字</h5><p>打开_config.yml，找到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Hexo</span><br><span class="line">subtitle: &#39;&#39;</span><br><span class="line">description: &#39;&#39;</span><br><span class="line">keywords:</span><br><span class="line">author: John Doe</span><br><span class="line">language: en</span><br><span class="line">timezone: &#39;&#39;</span><br></pre></td></tr></table></figure><p><code>title</code>和<code>subtitle</code>分别是网站主标题和副标题，会显示在网站头部；</p><p><code>description</code>在网站界面不会显示，内容会加入网站源码的<code>meta</code>标签中，主要用于SEO；</p><p><code>author</code>就填写网站所有者的名字，会在网站底部的<code>Copyright</code>处有所显示。</p><h5 id="2-3-2-设置语言"><a href="#2-3-2-设置语言" class="headerlink" title="2.3.2 设置语言"></a>2.3.2 设置语言</h5><p>该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在<code>根_config.yml</code>配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure><h5 id="2-3-3-添加about页"><a href="#2-3-3-添加about页" class="headerlink" title="2.3.3 添加about页"></a>2.3.3 添加about页</h5><p>about页是一个介绍自己的页面，可以在上面写一些自己的联系方式或者其他平台博客链接之类</p><p>在根目录下运行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &#39;about&#39;</span><br></pre></td></tr></table></figure><p>打开主题_config.yml，补充详细信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># About page</span><br><span class="line">about:</span><br><span class="line">  photo_url: ## Your photo e.g. http:&#x2F;&#x2F;cdn.chaooo.top&#x2F;blog&#x2F;themeauthor.jpg</span><br><span class="line">  items:</span><br><span class="line">  - label: email</span><br><span class="line">    url: ## Your email with mailto: e.g.  mailto:zhenggchaoo@gmail.com</span><br><span class="line">    title: ## Your email e.g.  zhenggchaoo@gmail.com</span><br><span class="line">  - label: github</span><br><span class="line">    url: ## Your github&#39;url e.g.  https:&#x2F;&#x2F;github.com&#x2F;chaooo</span><br><span class="line">    title: ## Your github&#39;name e.g.  chaooo</span><br><span class="line">  - label: weibo</span><br><span class="line">    url: ## Your weibo&#39;s url e.g.  http:&#x2F;&#x2F;weibo.com&#x2F;zhengchaooo</span><br><span class="line">    title: ## Your weibo&#39;s name e.g.  秋过冬漫长</span><br></pre></td></tr></table></figure><h5 id="2-3-4-安装-RSS-订阅-和-sitemap-网站地图-插件"><a href="#2-3-4-安装-RSS-订阅-和-sitemap-网站地图-插件" class="headerlink" title="2.3.4 安装 RSS(订阅) 和 sitemap(网站地图) 插件"></a>2.3.4 安装 RSS(订阅) 和 sitemap(网站地图) 插件</h5><p>在根目录打开命令行，运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br><span class="line">$ npm install hexo-generator-sitemap --save</span><br><span class="line">$ npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>添加<code>主题_config.yml</code>配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Plugins:</span><br><span class="line">  hexo-generator-feed</span><br><span class="line">  hexo-generator-sitemap</span><br><span class="line">  hexo-generator-baidu-sitemap</span><br><span class="line"></span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line"></span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure><h5 id="2-3-5-更换主题背景"><a href="#2-3-5-更换主题背景" class="headerlink" title="2.3.5 更换主题背景"></a>2.3.5 更换主题背景</h5><p>该主题目前有两种背景，深色和浅色，需要设置为深色只需要修改主题_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Theme tone</span><br><span class="line">dark: false #true&#x2F;false</span><br></pre></td></tr></table></figure><h5 id="2-3-6-添加文章版权信息"><a href="#2-3-6-添加文章版权信息" class="headerlink" title="2.3.6 添加文章版权信息"></a>2.3.6 添加文章版权信息</h5><p>修改主题_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Theme tone</span><br><span class="line">#Copyright</span><br><span class="line">copyright: </span><br><span class="line">  enable: true #true&#x2F;false  </span><br><span class="line">  describe: 转载请注明出处(必须保留原文作者署名原文链接) #自定义描述替换默认描述</span><br></pre></td></tr></table></figure><h4 id="2-4-添加本地搜索"><a href="#2-4-添加本地搜索" class="headerlink" title="2.4 添加本地搜索"></a>2.4 添加本地搜索</h4><p>默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件<a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="noopener">hexo-generator-json-content</a>来创建JSON数据文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-json-content@2.2.0 --save</span><br></pre></td></tr></table></figure><p>然后在<code>根_config.yml</code>添加配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">jsonContent:</span><br><span class="line">  meta: false</span><br><span class="line">  pages: false</span><br><span class="line">  posts:</span><br><span class="line">    title: true</span><br><span class="line">    date: true</span><br><span class="line">    path: true</span><br><span class="line">    text: true</span><br><span class="line">    raw: false</span><br><span class="line">    content: false</span><br><span class="line">    slug: false</span><br><span class="line">    updated: false</span><br><span class="line">    comments: false</span><br><span class="line">    link: false</span><br><span class="line">    permalink: false</span><br><span class="line">    excerpt: false</span><br><span class="line">    categories: false</span><br><span class="line">    tags: true</span><br></pre></td></tr></table></figure><p>最后在<code>主题_config.yml</code>添加配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local_search: true</span><br></pre></td></tr></table></figure><h4 id="2-5-首页添加文章置顶"><a href="#2-5-首页添加文章置顶" class="headerlink" title="2.5 首页添加文章置顶"></a>2.5 首页添加文章置顶</h4><p>在根目录下打开命令行窗口安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><p>假如文章需要添加置顶，只需要在Front-matter中加上top: true即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: BlueLake博客主题的详细配置</span><br><span class="line">tags: [hexo,BlueLake]</span><br><span class="line">categories: Hexo博客折腾</span><br><span class="line">top: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>2.6 修改站点图标</p><p>站点图标存放在主题的<code>Source</code>目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。<br>您需要准备一张ico格式并命名为<strong> favicon.ico </strong>，请将其放入hexo目录的<code>source</code>文件夹，建议大小：32px X 32px。<br>您需要为苹果设备添加网站徽标，请命名为<strong> apple-touch-icon.png </strong>的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。<br>(有很多网站都可以在线生成ico格式的图片。)</p><hr><h3 id="3-笔记仓库与博客项目分离"><a href="#3-笔记仓库与博客项目分离" class="headerlink" title="3. 笔记仓库与博客项目分离"></a>3. 笔记仓库与博客项目分离</h3><p>我们可以看到目前文章放在source/_posts目录下，我们不可能每次写笔记都跑到这里写，这里我采用git子模块的形式，我们平常笔记在自己的笔记仓库里写，写完推到远端仓库，更新博客只需要先拉一下笔记仓库里的文件，再更新到线上博客。这样做博客项目只负责发布，不负责编辑笔记。我的博客笔记放在<a href="https://gitee.com/lingengxiong/blog-note.git" target="_blank" rel="noopener">https://gitee.com/lingengxiong/blog-note.git</a></p><h4 id="3-1添加子模块的方法"><a href="#3-1添加子模块的方法" class="headerlink" title="3.1添加子模块的方法"></a>3.1添加子模块的方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add 仓库名 路径</span><br></pre></td></tr></table></figure><p>其中，仓库地址是指子模块仓库地址，路径指将子模块放置在当前工程下的路径。<br>注意：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能順利 Clone）</p><h4 id="3-2删除子模块方法"><a href="#3-2删除子模块方法" class="headerlink" title="3.2删除子模块方法"></a>3.2删除子模块方法</h4><p>submodule的删除稍微麻烦点：首先，要在“.gitmodules”文件中删除相应配置信息。然后，执行“git rm –cached ”命令将子模块所在的文件从git中删除。</p><p>故先把source/_post文件夹删除，然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add https:&#x2F;&#x2F;gitee.com&#x2F;lingengxiong&#x2F;blog-note.git source&#x2F;_posts&#x2F;</span><br></pre></td></tr></table></figure><p>这样我们已经成功把笔记仓库引入博客项目内，以后只需要定时拉取最新内容进行发布即可</p><h4 id="3-3-README-md等文件不生成博客内容"><a href="#3-3-README-md等文件不生成博客内容" class="headerlink" title="3.3  README.md等文件不生成博客内容"></a>3.3  README.md等文件不生成博客内容</h4><p>我们引入的博客仓库中包含有该仓库的README.md文件，这些文件不需要生成文章，可以修改根目录_config.yml文件进行屏蔽：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: [&#39;_posts&#x2F;**&#x2F;README.md&#39;,&#39;_posts&#x2F;**&#x2F;README.en.md&#39;]</span><br></pre></td></tr></table></figure><h3 id="4-hexo备份与恢复"><a href="#4-hexo备份与恢复" class="headerlink" title="4.hexo备份与恢复"></a>4.hexo备份与恢复</h3><h4 id="3-1-备份"><a href="#3-1-备份" class="headerlink" title="3.1.备份"></a>3.1.备份</h4><p>在公司好不容易把工程搭建起来，却到了下班的时候，回家想继续搞岂不是蛋疼得再配置一遍？这可不行，而且要是电脑坏了怎么办，前面的时间岂不是白费，所以肯定得做好备份~</p><p>最开始想到的是用传统的git 进行备份，但在网上搜了一下，发现前辈们早已想出更懒的办法，并做成插件—-hexo-git-backup，依旧是备份到github，但用起来更加便捷。</p><p>首先安装该插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure><p>然后到你的博客根目录的_config.yml配置文件中添加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#备份博客</span><br><span class="line">backup:</span><br><span class="line">  type: git</span><br><span class="line">  theme: hexo-theme-yilia-master</span><br><span class="line">  message: Back up my blog</span><br><span class="line">  repository:</span><br><span class="line">    github: git@github.com:lingengxiong&#x2F;lingengxiong.github.io.git，backup</span><br><span class="line">    gitee: git@gitee.com:lingengxiong&#x2F;lingengxiong.git,backup</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li>theme：你要备份的主题名称</li><li>message：自定义提交信息</li><li>repository：仓库名，注意仓库地址后面要添加一个分支名，比如我就创建了一个 backup 分支</li></ul><p>我这里备份了两份，一份到github，另一份备份到码云，不需要的只配置一个即可，实际上我们是在放博客静态文件的仓库上拉了一个backup分支，如果你不放心，也可新建一个仓库用来存放整个博客工程</p><p>实际上，并不是整个工程都需要备份的，只需要备份关键几个文件夹即可，其余到时再次生成即可</p><p>1.生成.gitignore文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .gitignore</span><br></pre></td></tr></table></figure><p>2.输入要忽略的文件及文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy&#x2F;</span><br></pre></td></tr></table></figure><p>3.最后用以下命令备份博客：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo backup</span><br></pre></td></tr></table></figure><p>或者简写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo b</span><br></pre></td></tr></table></figure><h4 id="2-恢复"><a href="#2-恢复" class="headerlink" title="2.恢复"></a>2.恢复</h4><p>已经备份好的hexo，到新发电脑只需要使用以下步骤即可恢复，无需从头开始配置，这里以我的仓库地址为例，实际情况改成自己的地址即可</p><p>1.先安装hexo</p><p><code>npm install -g hexo-cli</code></p><p>2.把存在远端的备份git clone下来</p><p><code>git clone https://gitee.com/lingengxiong/lingengxiong.git</code></p><p>这里备份在backup分支，可以直接下载对应分支</p><p><code>git clone -b backup https://gitee.com/lingengxiong/lingengxiong.git</code></p><p>3.下载所需要的库文件</p><p><code>npm install</code></p><p>4.下载推送工具deployer</p><p><code>npm install hexo-deployer-git</code></p><p>5.接下来就可以用熟悉的命令生成博客站点了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>正常情况下以上步骤完成后即可在浏览器用localhost:4000打开你的博客</p><p>继而发布到远端</p><p><code>hexo d</code></p><h3 id="5-添加评论系统gitalk"><a href="#5-添加评论系统gitalk" class="headerlink" title="5.添加评论系统gitalk"></a>5.添加评论系统gitalk</h3><h4 id="5-1申请"><a href="#5-1申请" class="headerlink" title="5.1申请"></a>5.1申请</h4><p>第三方评论系统很多，如</p><p><a href="http://duoshuo.com/" target="_blank" rel="noopener">多说评论</a>、<a href="https://disqus.com/" target="_blank" rel="noopener">Disqus评论</a>、<a href="https://livere.com/" target="_blank" rel="noopener">来必力评论</a>、<a href="http://www.uyan.cc/" target="_blank" rel="noopener">友言评论</a>、<a href="https://gentie.163.com/info.html" target="_blank" rel="noopener">网易云跟帖评论</a>、<a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">畅言评论</a>、基于Github Issue的<a href="https://gitalk.github.io/" target="_blank" rel="noopener">GITALK</a></p><p>但国内的有写时不时就没法用了，所以这里还是使用gitalk</p><p>1.<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">申请GitHub Application</a></p><p><img src="http://lgx.itengshe.com/20200115194943-1.png" alt=""></p><ul><li>Application name： 应用名称，随便起</li><li>Homepage URL： 网站URL，对应自己博客地址</li><li>Application description ：描述，随意</li><li>Authorization callback URL：# 网站URL，博客地址就好</li><li>点击注册，页面会出现其中<strong>Client ID</strong>和<strong>Client Secret</strong>在后面的配置中需要用到</li></ul><h4 id="5-2-配置"><a href="#5-2-配置" class="headerlink" title="5.2 配置"></a>5.2 配置</h4><p>在主题_config.yml配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">comment:</span><br><span class="line">  gitalk:</span><br><span class="line">    enable: true </span><br><span class="line">    ## If you want to use Gitment comment system please set the value to true.</span><br><span class="line">    owner: lingengxiong </span><br><span class="line">    ## Your GitHub ID, e.g. username</span><br><span class="line">    repo: blogtalk</span><br><span class="line">    ## The repository to store your comments, make sure you&#39;re the repo&#39;s owner, e.g. gitalk.github.io</span><br><span class="line">    client_id: </span><br><span class="line">    ## GitHub client ID, e.g. 75752dafe7907a897619</span><br><span class="line">    client_secret: </span><br><span class="line">    ## GitHub client secret, e.g. ec2fb9054972c891289640354993b662f4cccc50</span><br><span class="line">    admin: lingengxiong</span><br><span class="line">    ## Github repo owner and collaborators, only these guys can initialize github issues.</span><br><span class="line">    language: zh-CN </span><br><span class="line">    ## Language</span><br><span class="line">    pagerDirection: last </span><br><span class="line">    # Comment sorting direction, available values are last and first.</span><br></pre></td></tr></table></figure><p><strong>注意:</strong> </p><p>1.repo ,存放评论的仓库，这里我们新建一个名为blogtalk的仓库，这里只需要填入blogtalk即可，而不是完整地址</p><h4 id="5-3-踩坑"><a href="#5-3-踩坑" class="headerlink" title="5.3 踩坑"></a>5.3 踩坑</h4><h5 id="5-3-1-Error-Not-Found"><a href="#5-3-1-Error-Not-Found" class="headerlink" title="5.3.1 Error:Not Found"></a>5.3.1 Error:Not Found</h5><p><img src="http://lgx.itengshe.com/20200115200837-1.png" alt=""></p><p>发现是gittalk中的信息填写错了，name随便写；Homepage URL是你的仓库的名字，Authorization callback URL如果你指向了新</p><p>的域名就填新的，比如说我指向了域名<a href="http://blog.lgx123.cn/；否则也写仓库的名字就可以。" target="_blank" rel="noopener">http://blog.lgx123.cn/；否则也写仓库的名字就可以。</a></p><h5 id="5-3-2未找到相关Issues进行评论"><a href="#5-3-2未找到相关Issues进行评论" class="headerlink" title="5.3.2未找到相关Issues进行评论"></a>5.3.2未找到相关Issues进行评论</h5><p><img src="http://lgx.itengshe.com/20200115195902-1.png" alt=""></p><p>1.理想状态登录一下github账号即可，假如点击后返回首页，那应该是配置有问题，检测gitalk各项参数</p><p>2.配置完成未发布到线上，使用localhost:4000访问，也会出现这种情况，点击登录会跳到线上工程地址，此时只需要试试发布到线上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;玩hexo过程中遇到的坑&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Android笔记</title>
    <link href="http://yoursite.com/2019/12/28/android%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/12/28/android%E7%AC%94%E8%AE%B0/</id>
    <published>2019-12-28T09:00:00.000Z</published>
    <updated>2020-03-17T14:54:06.227Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下Android学习过程</p><a id="more"></a><h2 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h2><p>一般可用于启动 活动、启动服务、发送广播等场景</p><h2 id="四大组件-——-Activity"><a href="#四大组件-——-Activity" class="headerlink" title="四大组件 —— Activity"></a>四大组件 —— Activity</h2><h3 id="活动的启动模式"><a href="#活动的启动模式" class="headerlink" title="活动的启动模式"></a>活动的启动模式</h3><p>活动有4种启动模式，分别是standard ,singleTop, singleTask, singleInstance</p><p>可以在AndroidMainfest.xml中通过<activity>标签指定android:launchMode属性来选择启动模式。</p><h3 id="1-standard"><a href="#1-standard" class="headerlink" title="1.standard"></a>1.standard</h3><p>默认的启动模式，此模式下系统不在乎返回栈中是否存在，每次启动都创新的活动实例</p><p><img src="http://lgx.itengshe.com/20191226131944-1.png" alt=""></p><h3 id="2-singleTop"><a href="#2-singleTop" class="headerlink" title="2.singleTop"></a>2.singleTop</h3><p>此模式下，在启动活动时发现返回栈的<strong>栈顶已经是该活动</strong>，则直接使用，不再创建新的活动实例。但如果该活动不位于栈顶位置，则再次启动该活动时，<strong>还是会创建新的实例</strong></p><p><img src="http://lgx.itengshe.com/20191226132113-1.png" alt=""></p><h3 id="3-singleTask"><a href="#3-singleTask" class="headerlink" title="3.singleTask"></a>3.singleTask</h3><p>使用此模式，每次启动该活动时系统首先会在返回栈中检查是否存在该活动的实例，如果发现已经存在则直接使用该实例，并把在这个活动之上的所有活动统统出栈，如果没发现该活动实例，就会创建一个新的活动实例。</p><p><img src="http://lgx.itengshe.com/20191226132132-1.png" alt=""></p><h3 id="4-singleInstance"><a href="#4-singleInstance" class="headerlink" title="4.singleInstance"></a>4.singleInstance</h3><p>此模式不同于以上3种模式，指定为singleInstance模式的活动会启用一个<strong>新的返回栈</strong>来管理这个活动（其实如果 singleTask 模式指定了不同的 taskAffinity，也会启 动一个新的返回栈）。</p><p><em>应用场景</em>：假设我们的程序中有一个 活动是允许其他程序调用的 ，如果我们想实现其他程序和我们的程序可以共享这个活动的实例，就需要用此模式，</p><p>在这种模式下会有一个单独的返回栈来管理这个活 动，不管是哪个应用程序来访问这个活动，都共用的同一个返回栈，也就解决了共享活动实 例的问题    </p><p><img src="http://lgx.itengshe.com/20191226132159-1.png" alt=""></p><h2 id="四种布局"><a href="#四种布局" class="headerlink" title="四种布局"></a>四种布局</h2><h3 id="1-LinearLayout"><a href="#1-LinearLayout" class="headerlink" title="1.LinearLayout"></a>1.LinearLayout</h3><p>a.线性布局，将它包含的控件在线性方向上一次排列</p><p>b.<strong>排列方向：</strong>可水平方向（vertical)，垂直方向排列(horizontal)，修改方法：</p><p><img src="http://lgx.itengshe.com/20191226132300-1.png" alt=""></p><p>如果LinearLayout的排列方向是<strong>horizontal</strong>，内部控件宽度不能使用math_parent，会占满整个水平方向，同理<strong>vertical</strong>时内部控件高度不可使用match_parent。</p><h3 id="2-RelativeLayout"><a href="#2-RelativeLayout" class="headerlink" title="2.RelativeLayout"></a>2.RelativeLayout</h3><p>相对布局，与LinearLayout相比，更加随意一些，它能通过相对定位的方式让控件出现在布局的任何位置，可相对于整个容器，也可相对于某个控件</p><h3 id="3-FrameLayout"><a href="#3-FrameLayout" class="headerlink" title="3.FrameLayout"></a>3.FrameLayout</h3><p>这种布局没有任何定位方式，所有控件都会摆放在布局的左上角（应用场景不多）</p><h3 id="4-TableLayout"><a href="#4-TableLayout" class="headerlink" title="4.TableLayout"></a>4.TableLayout</h3><p>使用表格方式来排列控件（不常用）</p><h2 id="单位和尺寸"><a href="#单位和尺寸" class="headerlink" title="单位和尺寸"></a>单位和尺寸</h2><p><strong>px</strong>    像素，屏幕中可以显示的最小元素单位</p><p><strong>pt</strong>    磅数的意思，1磅等于1/72英尺，一般用作字体的单位</p><p><strong>dp</strong>    密度无关像素，也称dip，和px相比，它再不同密度的屏幕中的显示比例保持一致</p><p><strong>sp</strong>    可伸缩像素，采用与dp同样的设计理念，解决字体大小适配问题</p><p><strong>密度</strong>    Android中密度就是屏幕每英寸所包含的像素数，以dip为单位。</p><p>比如一个手机屏幕的宽是 2 英寸长是 3 英寸，如果 它的分辨率是 320x480 像素，那这个屏幕的密度就是 160dpi，如果它的分辨率是 640*960， 那这个屏幕的密度就是 320dpi，因此密度值越高的屏幕显示的效果就越精细。</p><p>Android 规定，在160dpi的屏幕上，1dp等于1px，而在320dpi的屏幕上，1dp等于2px.</p><p>因此，使用 dp 来指定控件的宽和高，就可以保证控件在不同密度的屏幕中的 显示比例保持一致。    </p><p>​    </p><h2 id="四大组件-——-Broadcast-Receive"><a href="#四大组件-——-Broadcast-Receive" class="headerlink" title="四大组件 ——- Broadcast Receive"></a>四大组件 ——- Broadcast Receive</h2><p>Android中的广播分为两种类型，即 <strong>标准广播</strong> 和 <strong>有序广播</strong></p><h3 id="1-标准广播"><a href="#1-标准广播" class="headerlink" title="1.标准广播"></a>1.标准广播</h3><p>标准广播是一直完全异步执行的广播，广播发出后，所有的广播接收器几乎都会在同一时刻接收到这条广播消息，因此他们之间没有任何的先后顺序可言。这种广播效率比较高，也意味着它无法被截断</p><p><img src="http://lgx.itengshe.com/20191226132321-1.png" alt=""></p><h3 id="2-有序广播"><a href="#2-有序广播" class="headerlink" title="2.有序广播"></a>2.有序广播</h3><p>有序广播是一种同步执行的广播，在广播发出后，同一时刻只会有一个广播接收器能接收到这条消息，当这个广播接收器中的逻辑执行完毕后，广播才会继续传递。</p><p>此时广播接收器是有先后顺序的，优先级高的广播接收器可以优先收到广播消息，也可截断正则传递的广播，使后面的广播接收器无法接收广播消息</p><p><img src="http://lgx.itengshe.com/20191226132340-1.png" alt=""></p><h3 id="3-注册广播"><a href="#3-注册广播" class="headerlink" title="3.注册广播"></a>3.注册广播</h3><p>分两种方式：在代码中注册（动态注册）、在AndroidMainifest.xml中注册（静态注册）</p><h2 id="持久化计算"><a href="#持久化计算" class="headerlink" title="持久化计算"></a>持久化计算</h2><p>Android系统主要提供三种数据持久化功能——-<strong>文件存储</strong>、<strong>SharedPreference存储</strong>以及<strong>数据库存储</strong></p><h3 id="1-文件存储"><a href="#1-文件存储" class="headerlink" title="1.文件存储"></a>1.文件存储</h3><p>不对存储的内容进行任何的格式化出来，所有数据原封不动存在文件中（适合存储一些简单的文本数据或者二进制数据），文件默认存储到/data/data/<packagename>/file/目录下</p><h3 id="2-SharedPreferences存储"><a href="#2-SharedPreferences存储" class="headerlink" title="2.SharedPreferences存储"></a>2.SharedPreferences存储</h3><p>使用<strong>键值对</strong>的方式来存储数据，较文件存储方便得多，而且支持多种不同数据类型的存储，即如果存入的数据类型是整型，读取出来的数据也是整形的</p><p>存储前，先获得SharedPreferences对象，Android中主要提供三种方法得到SharedPreferences对象</p><h4 id="2-1-getSharedPreferences"><a href="#2-1-getSharedPreferences" class="headerlink" title="2.1. getSharedPreferences"></a>2.1. getSharedPreferences</h4><p>​    Context类中的getSharedPreferences(fileName，操作模式)方法</p><p>​    <strong>第一个参数</strong>用于指定文件名称，指定文件不存在则会创建一个，SharedPreferences文件存放在/data/data/<packagename>/shared_prefs/目录下</p><p>​    <strong>第二个参数</strong>用于指定操作模式，主要有两种模式可以选 择，MODE_PRIVATE 和 MODE_MULTI_PROCESS。MODE_PRIVATE 仍然是默认的操 作模式，和直接传入 0 效果是相同的，表示只有当前的应用程序才可以对这个 SharedPreferences文件进行读写。MODE_MULTI_PROCESS 则一般是用于会有多个进程中 对同一个 SharedPreferences 文件进行读写的情况。类似地，MODE_WORLD_READABLE 和 MODE_WORLD_WRITEABLE 这两种模式已在 Android 4.2 版本中被废弃    </p><h4 id="2-2-getSharedPreferences"><a href="#2-2-getSharedPreferences" class="headerlink" title="2.2.getSharedPreferences"></a><strong>2.2.</strong>getSharedPreferences</h4><p>​    Activity类中的getSharedPreferences()方法</p><p>​    只接受一个操作模式参数，因为使用此方法时会自动将当前的类名作为SharedPreferences的文件名</p><h4 id="2-3-getDefaultSharedPreferences"><a href="#2-3-getDefaultSharedPreferences" class="headerlink" title="2.3.getDefaultSharedPreferences"></a><strong>2.3.</strong>getDefaultSharedPreferences</h4><p>​    PreferencesManager类中的getDefaultSharedPreferences()方法</p><p>​    这是一个静态方法，接受一个Context参数，并自动使用当前应用程序的包名作为前缀来命名SharedPreferences对象</p><h5 id="a-向SharedPreferences文件中存储数据"><a href="#a-向SharedPreferences文件中存储数据" class="headerlink" title="a.向SharedPreferences文件中存储数据"></a>a.<strong>向SharedPreferences文件中存储数据</strong></h5><p>分三步实现</p><p>1.调用SharedPreferences对象的edit()方法来获取一个SharedPreferences.Editor对象</p><p>2.向SharedPreferences对象中添加数据，比如添加布尔类型的数据就是用putBoolean方法</p><p>3.调用commit()方法，将添加的数据提交，从而完成数据存储操作</p><h5 id="b-从SharedPreferences文件中读取数据"><a href="#b-从SharedPreferences文件中读取数据" class="headerlink" title="b.从SharedPreferences文件中读取数据"></a>b.从SharedPreferences文件中读取数据</h5><p>使用SharedPreferences的get方法来对存储数据进行读取，每种get方法对应SharedPreferences.Editor中的一种put方法，例如读取布尔值，就使用getBoolean()方法</p><p>get方法接受两个参数，第一个是“键”，第二个是 默认值（即传入键找不到对应的值是，返回什么样的默认值）</p><h3 id="3-SQLite数据库存储"><a href="#3-SQLite数据库存储" class="headerlink" title="3.SQLite数据库存储"></a>3.SQLite数据库存储</h3><p>SQLite是一筐轻量级的关系型数据库，运算速度快，占用资源少，通常只需要几百k的内存就够了</p><p>Android提供了<strong>SQLiteOpenHelper</strong>帮助类，这是一个抽象类，有两个抽象方法—-onCreate() 和onUpgrade()，</p><p>使用时我们需要创建一个帮助类继承SQLiteOpenHelper，并在自己的帮助类中重写两个抽象方法，然后在这两个方法中区实现创建、升级数据库的逻辑</p><p><strong>SQLiteOpenHelper</strong>中有两个构造方法可以重写，一般使用参数较少的的方法，此方法接收四个参数；</p><p>1.Context     2.数据库名    3.允许我们在查询数据的时候返回一个自定义的Cursor，一般传入null</p><p>4.当前数据库的版本号</p><h5 id="3-1创建数据库："><a href="#3-1创建数据库：" class="headerlink" title="3.1创建数据库："></a><em>3.1创建数据库：</em></h5><p>构建出SQLiteOpenHelper实例后，再调用getReadableDatabase()或getWritableDatabase()就能创建出数据库了，数据库文件存放在/data/data/<packagename>/database/目录下</p><h5 id="3-2升级数据库"><a href="#3-2升级数据库" class="headerlink" title="3.2升级数据库"></a>3.2升级数据库</h5><p>只需要在构建SQLiteOpenHelper时传入的高于之前的版本号，就会调用onUpgrade()</p><h5 id="3-3SQLite数据类型"><a href="#3-3SQLite数据类型" class="headerlink" title="3.3SQLite数据类型"></a><strong>3.3SQLite数据类型</strong></h5><p>integer     整型</p><p>real        浮点型</p><p>text        文本型</p><p>blob    二进制型</p><hr><h2 id="四大组件-——-Content-Provider"><a href="#四大组件-——-Content-Provider" class="headerlink" title="四大组件 —— Content Provider"></a>四大组件 —— Content Provider</h2><p>主要用于在不同应用程序之间实现数据共享的功能，它的完整机制允许程序访问另一个程序中的数据，同时又保证被访问数据的安全性。</p><p>使用内容提供器是Android实现程序共享数据的标准方式</p><h3 id="1-访问其他程序中的数据"><a href="#1-访问其他程序中的数据" class="headerlink" title="1.访问其他程序中的数据"></a>1.访问其他程序中的数据</h3><p>​    每个应用程序想要访问内容提供器中的共享数据，要借助ContentResolve类，可以通过Context中的<strong>getContentResolver()</strong>方法获得该类的实例</p><p>ContentResolver提供了对数据进行CRUD的操作方法，即</p><ol><li>insert()添加数据 </li><li>update()更新数据</li><li>delete()删除数据</li><li>query()查询数据</li></ol><p>这几个方法都只需要传入Uri参数，即内容URI，内容URI给内容提供器中的数据建立了唯一的标识，由两部分组成，即权限（authority）和路径（path）</p><p>​    a.权限用于对不同的应用程序做区分的，为了避免冲突，都会采用程序包名的方式来进行命名，如com.example.app，则该程序对应的权限命名为com.example.app.provider</p><p>​    b.路径用于对同一应用程序中不同的表做区分，通常加到权限后面，比如某个程序的数据库中有两张表，table1和table2，此时路径分别命名为/table1和/table2，与权限结合起来，内容URI就变成              com.example.app.provider/table1 和</p><p>com.example.app.provider/table2</p><p>​    在字符串头部加上协议声明，得到最标准的URI的格式写法如下：</p><p>content://com.example.app.provider/table1 </p><p>content://com.example.app.provider/table2</p><p>​    得到URI字符串后，将其解析成Uri对象才可作为参数传入增删改查方法中</p><p>​    Uri uri = Uri.pase(“content://com.example.app.provider/table1”)</p><h2 id="异步消息处理机制"><a href="#异步消息处理机制" class="headerlink" title="异步消息处理机制"></a>异步消息处理机制</h2><p>Android中的异步消息处理主要由四个部分组成，Message、Handler、MessageQueue、和Looper。</p><h3 id="1-Messgae"><a href="#1-Messgae" class="headerlink" title="1.Messgae"></a>1.Messgae</h3><p>Message是线程之间传递的消息，可在内部携带少量的信息，用于不同线程之间交换数据。</p><p>例如what字段，除此之外arg1和arg2字段可携带一些整型数据，obj字段携带一个Object对象</p><h3 id="2-Handler"><a href="#2-Handler" class="headerlink" title="2.Handler"></a>2.Handler</h3><p>顾名思义就是处理者的意思，主要用你发送和处理消息。</p><p>发送消息一般是使用Handler的sendMessage()方法，发出的消息经过一系列辗转后，最终传递到Handler的handlerMessage()方法中。</p><h3 id="3-MessageQueue"><a href="#3-MessageQueue" class="headerlink" title="3.MessageQueue"></a>3.MessageQueue</h3><p>消息队列的意思，它主要用于存放所有通过Handler发送的消息。这部分消息会一直存在消息队列中，等待被处理。每个线程中只会有一个MessageQueue对象</p><h3 id="4-Looper"><a href="#4-Looper" class="headerlink" title="4.Looper"></a>4.Looper</h3><p>Looper 是每个线程中的 MessageQueue 的管家，调用 Looper 的 loop()方法后，就会 进入到一个无限循环当中，然后每当发现 MessageQueue 中存在一条消息，就会将它取 出，并传递到 Handler 的 handleMessage()方法中。每个线程中也只会有一个 Looper 对象。  </p><hr><h2 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h2><p>AsyncTask 基于异步消息处理机制，Android帮我们做了很好的封装</p><p>AsyncTask是一个抽象类，使用它得用一个子类去继承它，继承时可以为AsyncTask类指定一个泛型参数。</p><h3 id="1-Params"><a href="#1-Params" class="headerlink" title="1.Params"></a>1.Params</h3><p>​    在执行 AsyncTask 时需要传入的参数，可用于在后台任务中使用。    </p><h3 id="2-Progress"><a href="#2-Progress" class="headerlink" title="2.Progress"></a>2.Progress</h3><p>​    后台任务执行时，如果需要在界面上显示当前的进度，则使用这里指定的泛型作为 进度单位。    </p><h3 id="3-Result"><a href="#3-Result" class="headerlink" title="3.Result"></a>3.Result</h3><p>​    当任务执行完毕后，如果需要对结果进行返回，则使用这里指定的泛型作为返回值 类型。    </p><p>因此，一个最简单的自定义 AsyncTask 就可以写成如下方式： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class DownloadTask extends AsyncTask&lt;Void, Integer, Boolean&gt; &#123;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要重写AsyncTask中的几个方法才能完成对任务的定制。</p><h4 id="3-1-onPreExecute"><a href="#3-1-onPreExecute" class="headerlink" title="3.1.onPreExecute()"></a>3.1.onPreExecute()</h4><p>​    在后台任务开始之前调用，用于进行一些界面上的初始化，比如显示一个进度条对话框等</p><h4 id="3-2-doInBackground-Params"><a href="#3-2-doInBackground-Params" class="headerlink" title="3.2.doInBackground(Params)"></a>3.2.doInBackground(Params)</h4><p>​    这个方法中的所有代码都会在子线程中运行，我们在这里处理所有耗时任务。任务完成后通过return语句来返回任务执行结果。如果AsyncTask的第三个泛型参数为void，就不返回执行结果。</p><p>​    <strong>注意</strong>：此方法中不可进行UI操作，如需更新UI元素，比如反馈当前任务进度，可以调用publishProgress(Progress …)方法来完成</p><h4 id="3-3-onProgressUpdate-Progress…"><a href="#3-3-onProgressUpdate-Progress…" class="headerlink" title="3.3.onProgressUpdate(Progress…)"></a>3.3.onProgressUpdate(Progress…)</h4><p>​    在后台任务中调用publishProgress(Progress…)方法后，会很快调用此方法，方法中携带的参数就是在后台任务中传递过来的。在这个方法中可以对UI进行操作，利用参数中的数值对界面元素进行相应的更新。</p><h4 id="3-4-onPostExecute-Result"><a href="#3-4-onPostExecute-Result" class="headerlink" title="3.4.onPostExecute(Result)"></a>3.4.onPostExecute(Result)</h4><p>​    当后台任务执行完毕并通过return语句进行返回时，这个方法就会被调用。返回的数据会作为参数传递到此方法中，可以利用返回的数据进行一些UI操作，比如提醒任务执行结果，以及关闭进度条对话框。</p><p>因此，一个比较完整的自定义 AsyncTask 就可以写成如下方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class DownloadTask extends AsyncTask&lt;Void, Integer, Boolean&gt; &#123;</span><br><span class="line">    protected void onPreExecute() &#123;</span><br><span class="line">    progressDialog.show(); &#x2F;&#x2F; 显示进度对话框</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected Boolean doInBackground(Void... params) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                int downloadPercent &#x3D; doDownload(); &#x2F;&#x2F; 这是一个虚构的方法</span><br><span class="line">                publishProgress(downloadPercent);</span><br><span class="line">                if (downloadPercent &gt;&#x3D; 100) &#123;</span><br><span class="line">                break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">        return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onProgressUpdate(Integer... values) &#123;</span><br><span class="line">        &#x2F;&#x2F; 在这里更新下载进度</span><br><span class="line">        progressDialog.setMessage(&quot;Downloaded &quot; + values[0] + &quot;%&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onPostExecute(Boolean result) &#123;</span><br><span class="line">        progressDialog.dismiss(); &#x2F;&#x2F; 关闭进度对话框</span><br><span class="line">        &#x2F;&#x2F; 在这里提示下载结果</span><br><span class="line">            if (result) &#123;</span><br><span class="line">                Toast.makeText(context, &quot;Download succeeded&quot;,</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                Toast.makeText(context, &quot; Download failed&quot;,</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="四大组件-——-Service"><a href="#四大组件-——-Service" class="headerlink" title="四大组件 —— Service"></a>四大组件 —— Service</h2><h3 id="1-定义一个服务"><a href="#1-定义一个服务" class="headerlink" title="1. 定义一个服务"></a>1. 定义一个服务</h3><p>基本的Service这样定义，onBind 是service中唯一一个抽象方法，所以必须在子类中进行实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class MyService extends Service&#123;</span><br><span class="line">@Override</span><br><span class="line">public IBinder onBind(Intent intent)&#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让服务去处理一些事情，逻辑应该写在哪里呢？</p><p>我们又重写onCreate()，onStartCommand()和onDestroy(）方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class MyService extends Service &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public IBinder onBind(Intent intent) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">        return super.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上三个新加的方法是每个服务中最常用的方法</p><ol><li>oncreate() 在服务创建的时候调用</li><li>onStartCommand() 会在每次服务启动的时候调用</li><li>onDestroy() 会在服务销毁的时候调用</li></ol><p>所以一旦服务启动就需要执行的动作，逻辑写在onStartCommand()方法中，在onDestroy中回收那些不需要的资源。</p><p><strong>注意：</strong>每个服务都需要在AndroidManifest.xml中注册才能生效，这似乎是四大组件的共同特点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    package&#x3D;&quot;com.example.servicetest&quot;</span><br><span class="line">    android:versionCode&#x3D;&quot;1&quot;</span><br><span class="line">    android:versionName&#x3D;&quot;1.0&quot; &gt;</span><br><span class="line">    ……</span><br><span class="line">    &lt;application</span><br><span class="line">        android:allowBackup&#x3D;&quot;true&quot;</span><br><span class="line">        android:icon&#x3D;&quot;@drawable&#x2F;ic_launcher&quot;</span><br><span class="line">        android:label&#x3D;&quot;@string&#x2F;app_name&quot;</span><br><span class="line">        android:theme&#x3D;&quot;@style&#x2F;AppTheme&quot; &gt;</span><br><span class="line">        ……</span><br><span class="line">        &lt;service android:name&#x3D;&quot;.MyService&quot; &gt;</span><br><span class="line">        &lt;&#x2F;service&gt;</span><br><span class="line">    &lt;&#x2F;application&gt;</span><br><span class="line">&lt;&#x2F;manifest&gt;</span><br></pre></td></tr></table></figure><h3 id="2-启动和停止服务"><a href="#2-启动和停止服务" class="headerlink" title="2. 启动和停止服务"></a>2. 启动和停止服务</h3><p>启动和停止服务主要借助Intent来实现</p><p>启动服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent starIntent &#x3D; new Intent(this, MyService.class);</span><br><span class="line">startService(starIntent);</span><br></pre></td></tr></table></figure><p>停止服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent stopIntent &#x3D; new Intent(this, MyService.class);</span><br><span class="line">stopService(stopIntent);</span><br></pre></td></tr></table></figure><p>服务除了由活动来决定何时停止外，它也能自己让自己停下来，只需要服务自己调用stopSelf()方法即可</p><h3 id="3-活动与服务进行通信"><a href="#3-活动与服务进行通信" class="headerlink" title="3.活动与服务进行通信"></a>3.活动与服务进行通信</h3><p>​        上面使用的方法在活动中启动和停止服务，但是服务启动后活动和服务基本没有关系了，无法得知服务的状态，如何才能让活动和服务联系更加紧密呢，让活动能随时指挥服务去执行某些任务？这就需要用到刚才那个我们必须要重写的<strong>onBind()</strong>方法了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class MyService extends Service &#123;</span><br><span class="line">    private DownloadBinder mBinder &#x3D; new DownloadBinder();</span><br><span class="line">    class DownloadBinder extends Binder &#123;</span><br><span class="line">        public void startDownload() &#123;</span><br><span class="line">        Log.d(&quot;MyService&quot;, &quot;startDownload executed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">        public int getProgress() &#123;</span><br><span class="line">            Log.d(&quot;MyService&quot;, &quot;getProgress executed&quot;);</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public IBinder onBind(Intent intent) &#123;</span><br><span class="line">    return mBinder;</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        这里我们在刚才建的MyService类中新建一个DownloadBinder类，并继承自Binder，这个类里提供方法供外部使用，我们这里提供了<strong>开始下载</strong>方法和<strong>获取下载进度</strong>的方法。然后在MyService中创建了DownloadBinder实例，并在onBind()方法中返回该实例。</p><p>​        如何在活动中调用服务里的方法呢？实际上当一个活动与服务绑定了之后，就可以调用Binder提供的方法了。</p><p>​        在活动中，我们首先创建ServiceConnection 匿名类，在里面重写onServiceConnected()方法和 onServiceDisconnected()方法，这两个方法分别在活动与服务成功绑定和解除绑定时调用。在onServiceConnecter()方法中，我们又向下转型得到的DownloadBinder实例，有了实例，我们就可以在活动中调用DownloadBinder中的任何public方法了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private MyService.DownloadBinder downloadBinder;</span><br><span class="line">private ServiceConnection connection &#x3D; new ServiceConnection()&#123;</span><br><span class="line">@Override</span><br><span class="line">    public void onServiceDisconnected(ComponentName name) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void onServiceConnected(ComponentName name, IBinder service) &#123;</span><br><span class="line">        downloadBinder &#x3D; (MyService.DownloadBinder) service;</span><br><span class="line">        downloadBinder.startDownload();</span><br><span class="line">        downloadBinder.getProgress();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        别高兴太早，我们还没实现绑定呢。绑定方法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent bindIntent &#x3D; new Intent(this, Myservice.class);</span><br><span class="line">bindService(bindIntent, connection, BIND_AUTO_CREATE);</span><br></pre></td></tr></table></figure><p>​        bindService()接收三个参数，第一个就是刚构建出来的Intent对象，第二个参数是前面创角出来的ServiceConnection实例，第三个参数是标志位，BIND_AUTO_CREATE表示在活动和服务进行绑定后自动创建服务，此时MyService中的onCreate()方法会执行，但onStartCommand()方法不会执行。</p><p>​        解绑方法比较简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unbindService(connetion);</span><br></pre></td></tr></table></figure><p>​        <em>注意：</em>任何一个服务在整个应用程序范围内都是通用的，即任何一个活动都可与之绑定，而且绑定后他们都可以获取到相同的DownloadBinder实例。</p><h3 id="4-服务的生命周期"><a href="#4-服务的生命周期" class="headerlink" title="4.服务的生命周期"></a>4.服务的生命周期</h3><p>onCreate() ,onStartCommand(),onBind(),onDestroy()等方法都是在服务生命周期里可能回调的方法。</p><p>1.项目中任意位置调用Context的startService()方法，相应的服务就会启动，并回调onStartCommand()方法，假如服务没创建过，onCreat()方法会先于onStartCommand()方法执行。</p><p>2.服务启动后一直保持运行，直到stopService()或stopSelf()被调用</p><p>每次调用startService()方法，onStartCommand()方法就会调用一次，但每个服务只会有一个实例，无论调用多少次startService()，只需要调用一次stopService()或stopSelf()即可停止该服务</p><p>3.调用Context的bindService()方法，获取一个服务的持久连接，这是就会回调服务的onBind()方法，如果服务没创建过，onCreate()会先于onBind()方法执行。调用方可以获取onBind()方法里返回的IBinder对象的实例，这样即可与服务自由的通信了。调用方与服务之间的连接没有断开，服务就会一直保持运行状态。</p><p>4.调用startService()方法后，又调用stopService()方法，onDestroy()方法就会执行，此时服务已经销毁。类似的，调用bindService()方法后又调用unbindService()方法，onDestroy()方法也会执行。</p><p>5.Android系统机制规定，一个服务被启动或者被绑定后，就会一直处于运行状态，必须同时调用stopService()和unbindService()方法，onDestroy()方法才会执行。</p><h3 id="5-前台服务"><a href="#5-前台服务" class="headerlink" title="5.前台服务"></a>5.前台服务</h3><p>服务的系统优先级比较低，内存不足时，可能被回收，而前台服务就不会因为内存不足而被回收。</p><p><strong>与普通服务最大区别：</strong>会有一个正在运行的图标在系统状态栏显示。下拉状态栏可以看到详细信息，类似通知的效果。</p><p>创建方法类似创建通知方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class MyService extends Service &#123;</span><br><span class="line">    ……</span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">        Notification notification &#x3D; new Notification(R.drawable.ic_launcher,</span><br><span class="line">        &quot;Notification comes&quot;, System. currentTimeMillis());</span><br><span class="line">        Intent notificationIntent &#x3D; new Intent(this, MainActivity.class);</span><br><span class="line">        PendingIntent pendingIntent &#x3D; PendingIntent.getActivity(this, 0,</span><br><span class="line">        notificationIntent, 0);</span><br><span class="line">        notification.setLatestEventInfo(this, &quot;This is title&quot;, &quot;This is</span><br><span class="line">        content&quot;, pendingIntent);</span><br><span class="line">        startForeground(1, notification);</span><br><span class="line">        Log.d(&quot;MyService&quot;, &quot;onCreate executed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="1-使用HTTP协议访问网络"><a href="#1-使用HTTP协议访问网络" class="headerlink" title="1.使用HTTP协议访问网络"></a>1.使用HTTP协议访问网络</h3><p>​        Android 上发送HTTP请求有两种，1.<strong>HttpURLConnection</strong>和 2. <strong>HttpClient</strong></p><h4 id="1-1-HttpURLConnection"><a href="#1-1-HttpURLConnection" class="headerlink" title="1.1 HttpURLConnection"></a>1.1 HttpURLConnection</h4><p>先获取HttpURLConnection实例，new出一个URL对象，传入目标的网络地址，然后调一下openConnection()方法即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">URL url &#x3D; new URL(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;);</span><br><span class="line">HttpURLConnection connection &#x3D; (HttpURLConnection)url.openConnection();</span><br></pre></td></tr></table></figure><p>得到HttpURLConnection的实例后，设置HTTP请求所使用的方法。常用方法：GET 和 POST</p><p>​        GET：表示希望从服务器获取数据</p><p>​        POST :表示希望提交数据到服务器</p><h5 id="1-1-1-GET"><a href="#1-1-1-GET" class="headerlink" title="1.1.1 GET"></a>1.1.1 GET</h5><p>写法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.setRequestMethod(&quot;GET&quot;);</span><br></pre></td></tr></table></figure><p>设置连接超时、读取超时的毫秒，以及服务器希望得到的一些消息头等。根据自己实际情况进行编写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connection.setConnectTimeout(8000);</span><br><span class="line">connection.setReadTimeout(8000);</span><br></pre></td></tr></table></figure><p>之后调取getInputStream()方法就可以获取到服务器返回的输入流了，剩下的任务就是对输入流进行读取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputStream in &#x3D; connection.getInputStream();</span><br></pre></td></tr></table></figure><p>最后调用disconnect()方法关闭HTTP连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.disconnect();</span><br></pre></td></tr></table></figure><h5 id="1-1-2-POST"><a href="#1-1-2-POST" class="headerlink" title="1.1.2 POST"></a>1.1.2 POST</h5><p>需要向服务器提交数据，采用POST的方式，数据之间用&amp;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">connection.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">DataOutputStream out &#x3D; new DataOutputStream(connection.getOutputStream());</span><br><span class="line">out.writeBytes(&quot;username&#x3D;admin&amp;password&#x3D;123456&quot;);</span><br></pre></td></tr></table></figure><h4 id="1-2-使用HttpClient"><a href="#1-2-使用HttpClient" class="headerlink" title="1.2. 使用HttpClient"></a>1.2. 使用HttpClient</h4><p>HttpClient是Apache提供的HTTP网络访问接口，一开始就被引入Android API中，几乎可以完成与HttpURLConnection同样的效果，只是用法有较大的差别。</p><p>HttpClient是一个接口，无法创建它的实例，通常会创建一个DefaultHttpClient的实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpClient httpClient &#x3D; new DefaultHttpClient();</span><br></pre></td></tr></table></figure><h5 id="1-2-1-GET"><a href="#1-2-1-GET" class="headerlink" title="1.2.1 GET"></a>1.2.1 GET</h5><p>想发起一条GET请求，可以创建一个HttpGet对象，传入目标网络地址，然后调用HttpGet的execute()方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpGet httpGet &#x3D; new HttpGet(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;);</span><br><span class="line">httpClient.excute(httpGet);</span><br></pre></td></tr></table></figure><h5 id="1-2-2-POST"><a href="#1-2-2-POST" class="headerlink" title="1.2.2 POST"></a>1.2.2 POST</h5><p>使用POST请求比GET复杂一点，需创建HttpPost对象，并传入目标地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpPost httpPost &#x3D; new HttpPost(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;);</span><br></pre></td></tr></table></figure><p>1.然后通过一个NameValuePair集合来存放待提交的参数，</p><p>2.并将这个参数集合传入一个UrlEncodedFormEntity中，</p><p>3.然后调用HttpPost的setEntity()方法将构建好的UrlEncodedFormEntity传入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;NameValuePair&gt; params &#x3D; new ArrayList&lt;NameValuePair&gt;();</span><br><span class="line">params.add(new BasicNameValuePair(&quot;username&quot;,&quot;admin&quot;));</span><br><span class="line">params.add(new BasicNameValuePair(&quot;password&quot;,&quot;123456&quot;));</span><br><span class="line">UrlEncodedFormEntity entity &#x3D; new UrlEncodedFormEntity(params, &quot;utf-8&quot;);</span><br><span class="line">httpPost.setEntity(entity);</span><br></pre></td></tr></table></figure><p>4.接下来就和HttpGet一样，调用HttpClient的execute()方法，并将HttpPost对象传入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpClient.execute(httpPost);</span><br></pre></td></tr></table></figure><h5 id="1-2-3-处理返回结果"><a href="#1-2-3-处理返回结果" class="headerlink" title="1.2.3 处理返回结果"></a>1.2.3 处理返回结果</h5><p>执行完上面的操作，会返回一个HttpResponse对象，包含服务器返回的所有信息。通常我们会先取出服务器返回的状态码，等于200说明请求和响应都成功了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (httpResponse.getStatusLine().getStatusCode() &#x3D;&#x3D; 200)&#123;</span><br><span class="line">&#x2F;&#x2F;请求、响应都成功</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如得到状态码200，则可调用getEntity()方法获取到一个HttpEntity实例，然后调用EntityUtils.toString()这个静态方法将HttpEntity转换成字符串即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpEntity entity &#x3D; httpResponse.getEntity();</span><br><span class="line">String response &#x3D; EntityUtils.toString(entity);</span><br></pre></td></tr></table></figure><p>假如返回数据中包含中文，EntityUtils.toString()方法会出现乱码，需要将字符集指定为utf-8：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String response &#x3D; EntityUtils.toString(entity, &quot;utf-8&quot;);</span><br></pre></td></tr></table></figure><h2 id="基于位置的服务"><a href="#基于位置的服务" class="headerlink" title="基于位置的服务"></a>基于位置的服务</h2><p>简称LBS，利用无线电通信网络或者GPS等定位方式，确定出移动设备所在的位置。安卓中使用LocationManager类就能实现。</p><h3 id="1-LocationManager基本用法"><a href="#1-LocationManager基本用法" class="headerlink" title="1.LocationManager基本用法"></a>1.LocationManager基本用法</h3><p>获取LocationManager实例，可以调用Context的getSystemService()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocationManager locationManager &#x3D;(LocationManager)getSystemService(Context.LOCATION_SERVICE);</span><br></pre></td></tr></table></figure><p>接着需要选择一个位置提供器来确定设备当前的位置。Android中一般有三种位置提供器供选择，<strong>GPS_PROVIDER</strong>、<strong>NETWORK_PROVIDER</strong> 和 <strong>PASSIVE_PROVIDER</strong></p><h4 id="1-1-获取位置"><a href="#1-1-获取位置" class="headerlink" title="1.1 获取位置"></a>1.1 获取位置</h4><p>将选择好的内容提供器传入到getLastKnownLocation()方法中，就可以得到一个Location对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String provider &#x3D; LocationManager.NETWORK_PROVIDER;</span><br><span class="line">Location location &#x3D; LocationManager.getLastKnownLocation(provider);</span><br></pre></td></tr></table></figure><p>Location对象中包含经度，纬度，海拔等一系列位置信息，我们从中取出想要的数据即可。</p><p>想要经度较高的数据，需要用GPS定位功能，使用之前需要先确定定位功能是否启用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; providerList &#x3D; locationManager.getProviders(true);</span><br></pre></td></tr></table></figure><p>getProviders()方法传入true表示只有启用位置提供器才会被返回，之后再从providerList中判断是否包含GPS定位功能就行。</p><h4 id="1-2-监听位置变化"><a href="#1-2-监听位置变化" class="headerlink" title="1.2 监听位置变化"></a>1.2 监听位置变化</h4><p>getLastKnownLocation()  方法可以获取设备当前位置信息，想要知道设备位置变化，可以使用LocationManager的requestLocationUpdates()方法，只需要传入一个LocatiionListener，配置几个参数即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">locationManager.requestLocationUpadtes(LocationManager.GPS_PROVIDER, 5000, 10, new LocationListener()&#123;</span><br><span class="line">@Override</span><br><span class="line">public void onStatusChanged(String provider, int status, Bundle extras) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void onProviderEnabled(String provider) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void onProviderDisabled(String provider) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void onLocationChanged(Location location) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>参数一：位置提供器类型</p><p>参数二 : 监听位置变化的时间间隔，单位：毫秒</p><p>参数三：监听位置变化的距离间隔，以米为单位</p><p>参数四：LocationListener监听器</p><p>所以上面例子的效果是：监听GPS位置变化，每5秒检测一下，距离超过10米时，调用LocationListener的onLocationChanged()方法，把新的位置信息作为参数传入。</p><h3 id="2-Geocoding-API用法（反向地理编码）"><a href="#2-Geocoding-API用法（反向地理编码）" class="headerlink" title="2. Geocoding API用法（反向地理编码）"></a>2. Geocoding API用法（反向地理编码）</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下Android学习过程&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>webpack笔记</title>
    <link href="http://yoursite.com/2019/02/27/webpack%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/27/webpack%E7%AC%94%E8%AE%B0/</id>
    <published>2019-02-27T10:00:43.000Z</published>
    <updated>2020-03-17T14:54:06.389Z</updated>
    
    <content type="html"><![CDATA[<p>今天想了解一下webpack，但找了网上的一系列教程，都会或多或少出现一些不明报错，实在恼火，经过几番简化，终于用最简单的方法使用了webpack，在此记录一下<br><a id="more"></a><br>一.环境配置<br>1.首先，安装Node.js，这里不赘述，未接触nmp的童鞋可以参考Node.js安装配置</p><p>2.在cmd中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure><p>3.在自己测试的位置创建一个新的文件夹，命名webpack_demo</p><p><img src="http://lgx.itengshe.com/20200104135037-1.png" alt=""></p><p>4.进入刚刚所创建的文件夹webpack_demo，按住shift键同时点击鼠标右键(即打开cmd并进入webpack_demo文件夹)</p><p><img src="http://lgx.itengshe.com/20200104135055-1.png" alt=""></p><p>5.在打开的命令窗口键入：npm init，根据提示填写信息，name表示项目名，version表示版本等等，不一一赘述了，也可使用默认值，一路回车即可，最后出现“is this ok?”时，敲击回车键，webpack_demo文件夹便生成了package.json文件夹</p><p><img src="http://lgx.itengshe.com/20200104135115-1.png" alt=""></p><p>二.构建webpack项目<br>1.在webpack_demo文件夹下创建webpack.config.js文件，此文件为webpack的配置文件。具体内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;webpack.config.js</span><br><span class="line">module.exports&#x3D;&#123;</span><br><span class="line">entry:&#39;.&#x2F;src&#x2F;js&#x2F;entry.js&#39;, &#x2F;&#x2F;页面入口文件</span><br><span class="line">&#x2F;&#x2F;输出文件</span><br><span class="line">output:&#123;</span><br><span class="line">filename:&#39;index.js&#39;,&#x2F;&#x2F;输出文件名</span><br><span class="line">path:__dirname+&#39;&#x2F;out&#39;,&#x2F;&#x2F;输出文件路径</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数简单说明：</p><ul><li><p>entry： 是 页面入口文件配置 （html文件引入唯一的js 文件）</p></li><li><p>output：对应输出项配置 </p><ul><li>​    path ：入口文件最终要输出到哪里，</li><li>​    filename：输出文件的名称</li><li>​    publicPath：公共资源路径</li></ul></li></ul><p>2.接着，我们在创建一些基本的文件保存路径，我们这里创建网页中最基本的一些文件夹</p><p><img src="http://lgx.itengshe.com/20200104135326-1.png" alt=""></p><p><img src="http://lgx.itengshe.com/20200104135341-1.png" alt=""></p><p>3.接下来我们在index.html，和entry.js中填充点内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- index.html --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;hello world&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;.&#x2F;out&#x2F;index.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; entry.js</span><br><span class="line">document.write(&#39;呵呵到天亮&#39;);</span><br></pre></td></tr></table></figure><p>4.完成以上操作，我们可以来试试效果了，在刚才所打开的cmd窗口中输入webpack （假如已经关闭，按上面第4步操作即可）</p><p>下面WARNING in configuration原因及解决办法可点击链接：<a href="https://blog.csdn.net/lgx1134569285/article/details/87986317" target="_blank" rel="noopener">https://blog.csdn.net/lgx1134569285/article/details/87986317</a></p><p><img src="http://lgx.itengshe.com/20200104135431-1.png" alt=""></p><p>5.看到上面 的一幕，恭喜你，已经成功了，我们再进一步验证一下，</p><p><img src="http://lgx.itengshe.com/20200104135552-1.png" alt=""></p><p>目录下多了一个out文件夹，out文件生成了我们所命名的index.js</p><p><img src="http://lgx.itengshe.com/20200104135604-1.png" alt=""></p><p>打开内容如下</p><p><img src="http://lgx.itengshe.com/20200104135615-1.png" alt=""></p><p>打开index.html文件，结果不仅打印出html文件中的”hello world”，js中的打印123也生效了</p><p>(ps：这里打印中文时假如出现乱码，记得在html文件的<head>标签添加编码<meta charset="utf-8">)</p><p><img src="http://lgx.itengshe.com/20200104135627-1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天想了解一下webpack，但找了网上的一系列教程，都会或多或少出现一些不明报错，实在恼火，经过几番简化，终于用最简单的方法使用了webpack，在此记录一下&lt;br&gt;
    
    </summary>
    
    
      <category term="javaScripts" scheme="http://yoursite.com/categories/javaScripts/"/>
    
      <category term="前端" scheme="http://yoursite.com/categories/javaScripts/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
</feed>
