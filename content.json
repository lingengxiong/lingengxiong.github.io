{"meta":{"title":"呵呵到天亮","subtitle":"","description":"","author":"lingengxiong","url":"http://yoursite.com"},"pages":[{"title":"'about'","date":"2020-01-06T08:16:40.000Z","updated":"2020-01-06T08:16:40.143Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"lua","slug":"lua使用记录","date":"2020-01-09T13:51:43.000Z","updated":"2020-01-15T02:07:42.765Z","comments":true,"path":"2020/01/09/lua使用记录/","link":"","permalink":"http://yoursite.com/2020/01/09/lua%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/","excerpt":"记录使用lua过程中遇到的问题","text":"记录使用lua过程中遇到的问题 字符串操作截去字符串首尾空格1string.gsub(str, &quot;^%s*(.-)%s*$&quot;, &quot;%1&quot;) --截掉前后空格","categories":[],"tags":[],"keywords":[]},{"title":"npm","slug":"npm","date":"2020-01-03T13:51:43.000Z","updated":"2020-01-07T05:07:58.617Z","comments":true,"path":"2020/01/03/npm/","link":"","permalink":"http://yoursite.com/2020/01/03/npm/","excerpt":"记录使用npm过程中遇到的问题，免得再遇到时还到处搜索","text":"记录使用npm过程中遇到的问题，免得再遇到时还到处搜索 配置npm转到淘宝镜像安装npm后，默认是使用国外镜像的，所以不翻墙速度简直龟速，使用淘宝镜像就比较快了，切换方法如下： 1npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F; 且回原来是： 1npm config set registry https:&#x2F;&#x2F;registry.npmjs.org&#x2F; 查看当前npm使用哪个源，则用这个命令 1npm config get registry","categories":[],"tags":[{"name":"npm","slug":"npm","permalink":"http://yoursite.com/tags/npm/"}],"keywords":[]},{"title":"hexo笔记","slug":"hexo笔记","date":"2020-01-03T10:51:43.000Z","updated":"2020-01-15T12:34:44.465Z","comments":true,"path":"2020/01/03/hexo笔记/","link":"","permalink":"http://yoursite.com/2020/01/03/hexo%E7%AC%94%E8%AE%B0/","excerpt":"玩hexo过程中遇到的坑","text":"玩hexo过程中遇到的坑 本文主要参考自 https://chaooo.github.io/article/20161229.html，主要用来记录hexo搭建的整个过程，方便后面查看。 1.hexo安装在安装hexo之前，必须确认你已经安装了Node.js和Git。 1.1.hexo 初始化安装 hexo 1npm install -g hexo-cli 在你想要存放该博客项目的目录下，执行以下命令，这两步都比较耗时，因为要下载许多文件 12hexo initnpm install 先预览一下效果 12hexo generatehexo server 上面命令可简化成如下： 12hexo ghexo s 运行成功后，即可在浏览器输入localhost:4000即可看到效果。 1.2.部署到远端我们这里以gitee码云作为远端进行部署，在根目录下找到_config.xml，添加以下代码 12345678# Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.htmldeploy: type: &#39;git&#39; repository: #github: git@github.com:lingengxiong&#x2F;lingengxiong.github.io.git gitee: git@gitee.com:lingengxiong&#x2F;lingengxiong.git branch: master 假如需要部署到多个远端，只需要在repository中配置多个地址即可。 配置完成后，安装deployer插件，该插件用来将生产的静态文件部署到远端仓库 1npm install hexo-deployer-git --save 安装完成即可生产静态文件，继而推送到远端 12hexo generatehexo deploy 温馨提示：第一次使用git时会弹出输入框，此时输入git仓库的用户名和密码即可。 2.hexo 主题安装尝试了很多种主题，最后决定用BlueLake，一方面是因为布局功能都很符合自己的需求，另一方面则是挺好看的 2.1.安装安装主题和渲染: 1$ git clone https:&#x2F;&#x2F;github.com&#x2F;chaooo&#x2F;hexo-theme-BlueLake.git themes&#x2F;BlueLake Blue是基于jade和stylus写的，所有需要安装hexo-renderer-jade和hexo-renderer-stylus 12$ npm install hexo-renderer-jade@0.3.0 --save$ npm install hexo-renderer-stylus --save 切到themes/BlueLake，下载主题所需要的库 12$ cd themes&#x2F;BlueLake$ npm install 2.2.启用主题要使用刚下载好的主题，只需要修改根目录下_config.xml配置文件，找到theme字段，修改为BlueLake 1theme: BuleLake 依次执行以下命令，然后打开localhost:4000就可以看效果了 123hexo cleanhexo ghexo s 2.3 配置目前的整个工程都还是比较原始的状态，我们的工作就是添加我们自己的东西进去了。 2.3.1 配置网站头部显示文字打开_config.xml，找到： 12345678# Sitetitle: Hexosubtitle: &#39;&#39;description: &#39;&#39;keywords:author: John Doelanguage: entimezone: &#39;&#39; title和subtitle分别是网站主标题和副标题，会显示在网站头部； description在网站界面不会显示，内容会加入网站源码的meta标签中，主要用于SEO； author就填写网站所有者的名字，会在网站底部的Copyright处有所显示。 2.3.2 设置语言该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在根_config.yml配置如下： 1language: zh-CN 2.3.3 添加about页about页是一个介绍自己的页面，可以在上面写一些自己的联系方式或者其他平台博客链接之类 在根目录下运行命令： 1hexo new page &#39;about&#39; 打开主题_config.xml，补充详细信息： 1234567891011121314# About pageabout: photo_url: ## Your photo e.g. http:&#x2F;&#x2F;cdn.chaooo.top&#x2F;blog&#x2F;themeauthor.jpg items: - label: email url: ## Your email with mailto: e.g. mailto:zhenggchaoo@gmail.com title: ## Your email e.g. zhenggchaoo@gmail.com - label: github url: ## Your github&#39;url e.g. https:&#x2F;&#x2F;github.com&#x2F;chaooo title: ## Your github&#39;name e.g. chaooo - label: weibo url: ## Your weibo&#39;s url e.g. http:&#x2F;&#x2F;weibo.com&#x2F;zhengchaooo title: ## Your weibo&#39;s name e.g. 秋过冬漫长 2.3.4 安装 RSS(订阅) 和 sitemap(网站地图) 插件在根目录打开命令行，运行以下命令： 123$ npm install hexo-generator-feed --save$ npm install hexo-generator-sitemap --save$ npm install hexo-generator-baidu-sitemap --save 添加主题_config.yml配置： 1234567891011121314Plugins: hexo-generator-feed hexo-generator-sitemap hexo-generator-baidu-sitemapfeed: type: atom path: atom.xml limit: 20sitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 2.3.5 更换主题背景该主题目前有两种背景，深色和浅色，需要设置为深色只需要修改主题_config.xml 12# Theme tonedark: false #true&#x2F;false 2.3.6 添加文章版权信息修改主题_config.xml 12345# Theme tone#Copyrightcopyright: enable: true #true&#x2F;false describe: 转载请注明出处(必须保留原文作者署名原文链接) #自定义描述替换默认描述 2.4 添加本地搜索默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件hexo-generator-json-content来创建JSON数据文件： 1$ npm install hexo-generator-json-content@2.2.0 --save 然后在根_config.yml添加配置： 123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 最后在主题_config.yml添加配置： 1local_search: true 2.5 首页添加文章置顶在根目录下打开命令行窗口安装： 12$ npm uninstall hexo-generator-index --save$ npm install hexo-generator-index-pin-top --save 假如文章需要添加置顶，只需要在Front-matter中加上top: true即可 123456---title: BlueLake博客主题的详细配置tags: [hexo,BlueLake]categories: Hexo博客折腾top: true--- 2.6 修改站点图标 站点图标存放在主题的Source目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。您需要准备一张ico格式并命名为** favicon.ico ，请将其放入hexo目录的source文件夹，建议大小：32px X 32px。您需要为苹果设备添加网站徽标，请命名为 apple-touch-icon.png **的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。(有很多网站都可以在线生成ico格式的图片。) 3. 笔记仓库与博客项目分离我们可以看到目前文章放在source/_posts目录下，我们不可能每次写笔记都跑到这里写，这里我采用git子模块的形式，我们平常笔记在自己的笔记仓库里写，写完推到远端仓库，更新博客只需要先拉一下笔记仓库里的文件，再更新到线上博客。这样做博客项目只负责发布，不负责编辑笔记。我的博客笔记放在https://gitee.com/lingengxiong/blog-note.git 3.1添加子模块的方法1git submodule add 仓库名 路径 其中，仓库地址是指子模块仓库地址，路径指将子模块放置在当前工程下的路径。注意：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能順利 Clone） 3.2删除子模块方法submodule的删除稍微麻烦点：首先，要在“.gitmodules”文件中删除相应配置信息。然后，执行“git rm –cached ”命令将子模块所在的文件从git中删除。 故先把source/_post文件夹删除，然后执行 1git submodule add https:&#x2F;&#x2F;gitee.com&#x2F;lingengxiong&#x2F;blog-note.git source&#x2F;_posts&#x2F; 这样我们已经成功把笔记仓库引入博客项目内，以后只需要定时拉取最新内容进行发布即可 3.3 README.md等文件不生成博客内容我们引入的博客仓库中包含有该仓库的README.md文件，这些文件不需要生成文章，可以修改根目录_config.xml文件进行屏蔽： 1skip_render: [&#39;_posts&#x2F;**&#x2F;README.md&#39;,&#39;_posts&#x2F;**&#x2F;README.en.md&#39;] 4.hexo备份与恢复3.1.备份在公司好不容易把工程搭建起来，却到了下班的时候，回家想继续搞岂不是蛋疼得再配置一遍？这可不行，而且要是电脑坏了怎么办，前面的时间岂不是白费，所以肯定得做好备份~ 最开始想到的是用传统的git 进行备份，但在网上搜了一下，发现前辈们早已想出更懒的办法，并做成插件—hexo-git-backup，依旧是备份到github，但用起来更加便捷。 首先安装该插件 1npm install hexo-git-backup --save 然后到你的博客根目录的_config.xml配置文件中添加如下配置： 12345678#备份博客backup: type: git theme: hexo-theme-yilia-master message: Back up my blog repository: github: git@github.com:lingengxiong&#x2F;lingengxiong.github.io.git，backup gitee: git@gitee.com:lingengxiong&#x2F;lingengxiong.git,backup 参数解释： theme：你要备份的主题名称 message：自定义提交信息 repository：仓库名，注意仓库地址后面要添加一个分支名，比如我就创建了一个 backup 分支 我这里备份了两份，一份到github，另一份备份到码云，不需要的只配置一个即可，实际上我们是在放博客静态文件的仓库上拉了一个backup分支，如果你不放心，也可新建一个仓库用来存放整个博客工程 实际上，并不是整个工程都需要备份的，只需要备份关键几个文件夹即可，其余到时再次生成即可 1.生成.gitignore文件 1touch .gitignore 2.输入要忽略的文件及文件夹 1234567.DS_StoreThumbs.dbdb.json.lognode_modules&#x2F;public&#x2F;.deploy&#x2F; 3.最后用以下命令备份博客： 1hexo backup 或者简写： 1hexo b 2.恢复已经备份好的hexo，到新发电脑只需要使用以下步骤即可恢复，无需从头开始配置，这里以我的仓库地址为例，实际情况改成自己的地址即可 1.先安装hexo npm install -g hexo-cli 2.把存在远端的备份git clone下来 git clone https://gitee.com/lingengxiong/lingengxiong.git 这里备份在backup分支，可以直接下载对应分支 git clone -b backup https://gitee.com/lingengxiong/lingengxiong.git 3.下载所需要的库文件 npm install 4.下载推送工具deployer npm install hexo-deployer-git 5.接下来就可以用熟悉的命令生成博客站点了 123hexo cleanhexo ghexo s 正常情况下以上步骤完成后即可在浏览器用localhost:4000打开你的博客 继而发布到远端 hexo d 5.添加评论系统gitalk5.1申请第三方评论系统很多，如 多说评论、Disqus评论、来必力评论、友言评论、网易云跟帖评论、畅言评论、基于Github Issue的GITALK 但国内的有写时不时就没法用了，所以这里还是使用gitalk 1.申请GitHub Application Application name： 应用名称，随便起 Homepage URL： 网站URL，对应自己博客地址 Application description ：描述，随意 Authorization callback URL：# 网站URL，博客地址就好 点击注册，页面会出现其中Client ID和Client Secret在后面的配置中需要用到 5.2 配置在主题_config.xml配置： 123456789101112131415161718comment: gitalk: enable: true ## If you want to use Gitment comment system please set the value to true. owner: lingengxiong ## Your GitHub ID, e.g. username repo: blogtalk ## The repository to store your comments, make sure you&#39;re the repo&#39;s owner, e.g. gitalk.github.io client_id: ## GitHub client ID, e.g. 75752dafe7907a897619 client_secret: ## GitHub client secret, e.g. ec2fb9054972c891289640354993b662f4cccc50 admin: lingengxiong ## Github repo owner and collaborators, only these guys can initialize github issues. language: zh-CN ## Language pagerDirection: last # Comment sorting direction, available values are last and first. 注意: 1.repo ,存放评论的仓库，这里我们新建一个名为blogtalk的仓库，这里只需要填入blogtalk即可，而不是完整地址 5.3 踩坑5.3.1 Error:Not Found 发现是gittalk中的信息填写错了，name随便写；Homepage URL是你的仓库的名字，Authorization callback URL如果你指向了新 的域名就填新的，比如说我指向了域名http://blog.lgx123.cn/；否则也写仓库的名字就可以。 5.3.2未找到相关Issues进行评论 1.理想状态登录一下github账号即可，假如点击后返回首页，那应该是配置有问题，检测gitalk各项参数 2.配置完成未发布到线上，使用localhost:4000访问，也会出现这种情况，点击登录会跳到线上工程地址，此时只需要试试发布到线上","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}],"keywords":[]},{"title":"Android笔记","slug":"android笔记","date":"2019-12-28T09:00:00.000Z","updated":"2020-01-15T12:34:44.465Z","comments":true,"path":"2019/12/28/android笔记/","link":"","permalink":"http://yoursite.com/2019/12/28/android%E7%AC%94%E8%AE%B0/","excerpt":"记录一下Android学习过程","text":"记录一下Android学习过程 Intent一般可用于启动 活动、启动服务、发送广播等场景 四大组件 —- Activity活动的启动模式活动有4种启动模式，分别是standard ,singleTop, singleTask, singleInstance 可以在AndroidMainfest.xml中通过标签指定android:launchMode属性来选择启动模式。 1.standard默认的启动模式，此模式下系统不在乎返回栈中是否存在，每次启动都创新的活动实例 2.singleTop此模式下，在启动活动时发现返回栈的栈顶已经是该活动，则直接使用，不再创建新的活动实例。但如果该活动不位于栈顶位置，则再次启动该活动时，还是会创建新的实例 3.singleTask使用此模式，每次启动该活动时系统首先会在返回栈中检查是否存在该活动的实例，如果发现已经存在则直接使用该实例，并把在这个活动之上的所有活动统统出栈，如果没发现该活动实例，就会创建一个新的活动实例。 4.singleInstance此模式不同于以上3种模式，指定为singleInstance模式的活动会启用一个新的返回栈来管理这个活动（其实如果 singleTask 模式指定了不同的 taskAffinity，也会启 动一个新的返回栈）。 应用场景：假设我们的程序中有一个 活动是允许其他程序调用的 ，如果我们想实现其他程序和我们的程序可以共享这个活动的实例，就需要用此模式， 在这种模式下会有一个单独的返回栈来管理这个活 动，不管是哪个应用程序来访问这个活动，都共用的同一个返回栈，也就解决了共享活动实 例的问题 四种布局1.LinearLayouta.线性布局，将它包含的控件在线性方向上一次排列 b.排列方向：可水平方向（vertical)，垂直方向排列(horizontal)，修改方法： 如果LinearLayout的排列方向是horizontal，内部控件宽度不能使用math_parent，会占满整个水平方向，同理vertical时内部控件高度不可使用match_parent。 2.RelativeLayout相对布局，与LinearLayout相比，更加随意一些，它能通过相对定位的方式让控件出现在布局的任何位置，可相对于整个容器，也可相对于某个控件 3.FrameLayout这种布局没有任何定位方式，所有控件都会摆放在布局的左上角（应用场景不多） 4.TableLayout使用表格方式来排列控件（不常用） 单位和尺寸px 像素，屏幕中可以显示的最小元素单位 pt 磅数的意思，1磅等于1/72英尺，一般用作字体的单位 dp 密度无关像素，也称dip，和px相比，它再不同密度的屏幕中的显示比例保持一致 sp 可伸缩像素，采用与dp同样的设计理念，解决字体大小适配问题 密度 Android中密度就是屏幕每英寸所包含的像素数，以dip为单位。 比如一个手机屏幕的宽是 2 英寸长是 3 英寸，如果 它的分辨率是 320x480 像素，那这个屏幕的密度就是 160dpi，如果它的分辨率是 640*960， 那这个屏幕的密度就是 320dpi，因此密度值越高的屏幕显示的效果就越精细。 Android 规定，在160dpi的屏幕上，1dp等于1px，而在320dpi的屏幕上，1dp等于2px. 因此，使用 dp 来指定控件的宽和高，就可以保证控件在不同密度的屏幕中的 显示比例保持一致。 ​ 四大组件 —– Broadcast ReceiveAndroid中的广播分为两种类型，即 标准广播 和 有序广播 1.标准广播标准广播是一直完全异步执行的广播，广播发出后，所有的广播接收器几乎都会在同一时刻接收到这条广播消息，因此他们之间没有任何的先后顺序可言。这种广播效率比较高，也意味着它无法被截断 2.有序广播有序广播是一种同步执行的广播，在广播发出后，同一时刻只会有一个广播接收器能接收到这条消息，当这个广播接收器中的逻辑执行完毕后，广播才会继续传递。 此时广播接收器是有先后顺序的，优先级高的广播接收器可以优先收到广播消息，也可截断正则传递的广播，使后面的广播接收器无法接收广播消息 注册广播分两种方式：在代码中注册（动态注册）、在AndroidMainifest.xml中注册（静态注册） 持久化计算Android系统主要提供三种数据持久化功能—–文件存储、SharedPreference存储以及数据库存储 1.文件存储不对存储的内容进行任何的格式化出来，所有数据原封不动存在文件中（适合存储一些简单的文本数据或者二进制数据），文件默认存储到/data/data//file/目录下 2.SharedPreferences存储使用键值对的方式来存储数据，较文件存储方便得多，而且支持多种不同数据类型的存储，即如果存入的数据类型是整型，读取出来的数据也是整形的 存储前，先获得SharedPreferences对象，Android中主要提供三种方法得到SharedPreferences对象 1.getSharedPreferences​ Context类中的getSharedPreferences(fileName，操作模式)方法 ​ 第一个参数用于指定文件名称，指定文件不存在则会创建一个，SharedPreferences文件存放在/data/data//shared_prefs/目录下 ​ 第二个参数用于指定操作模式，主要有两种模式可以选 择，MODE_PRIVATE 和 MODE_MULTI_PROCESS。MODE_PRIVATE 仍然是默认的操 作模式，和直接传入 0 效果是相同的，表示只有当前的应用程序才可以对这个 SharedPreferences文件进行读写。MODE_MULTI_PROCESS 则一般是用于会有多个进程中 对同一个 SharedPreferences 文件进行读写的情况。类似地，MODE_WORLD_READABLE 和 MODE_WORLD_WRITEABLE 这两种模式已在 Android 4.2 版本中被废弃 2.getSharedPreferences​ Activity类中的getSharedPreferences()方法 ​ 只接受一个操作模式参数，因为使用此方法时会自动将当前的类名作为SharedPreferences的文件名 3.getDefaultSharedPreferences​ PreferencesManager类中的getDefaultSharedPreferences()方法 ​ 这是一个静态方法，接受一个Context参数，并自动使用当前应用程序的包名作为前缀来命名SharedPreferences对象 a.向SharedPreferences文件中存储数据分三步实现 1.调用SharedPreferences对象的edit()方法来获取一个SharedPreferences.Editor对象 2.向SharedPreferences对象中添加数据，比如添加布尔类型的数据就是用putBoolean方法 3.调用commit()方法，将添加的数据提交，从而完成数据存储操作 b.从SharedPreferences文件中读取数据使用SharedPreferences的get方法来对存储数据进行读取，每种get方法对应SharedPreferences.Editor中的一种put方法，例如读取布尔值，就使用getBoolean()方法 get方法接受两个参数，第一个是“键”，第二个是 默认值（即传入键找不到对应的值是，返回什么样的默认值） 3.SQLite数据库存储SQLite是一筐轻量级的关系型数据库，运算速度快，占用资源少，通常只需要几百k的内存就够了 Android提供了SQLiteOpenHelper帮助类，这是一个抽象类，有两个抽象方法—onCreate() 和onUpgrade()， 使用时我们需要创建一个帮助类继承SQLiteOpenHelper，并在自己的帮助类中重写两个抽象方法，然后在这两个方法中区实现创建、升级数据库的逻辑 SQLiteOpenHelper中有两个构造方法可以重写，一般使用参数较少的的方法，此方法接收四个参数； 1.Context 2.数据库名 3.允许我们在查询数据的时候返回一个自定义的Cursor，一般传入null 4.当前数据库的版本号 创建数据库：构建出SQLiteOpenHelper实例后，再调用getReadableDatabase()或getWritableDatabase()就能创建出数据库了，数据库文件存放在/data/data//database/目录下 升级数据库只需要在构建SQLiteOpenHelper时传入的高于之前的版本号，就会调用onUpgrade() SQLite数据类型integer 整型 real 浮点型 text 文本型 blob 二进制型 四大组件 —- Content Provider主要用于在不同应用程序之间实现数据共享的功能，它的完整机制允许程序访问另一个程序中的数据，同时又保证被访问数据的安全性。 使用内容提供器是Android实现程序共享数据的标准方式 1.访问其他程序中的数据​ 每个应用程序想要访问内容提供器中的共享数据，要借助ContentResolve类，可以通过Context中的getContentResolver()方法获得该类的实例 ContentResolver提供了对数据进行CRUD的操作方法，即 insert()添加数据 update()更新数据 delete()删除数据 query()查询数据 这几个方法都只需要传入Uri参数，即内容URI，内容URI给内容提供器中的数据建立了唯一的标识，由两部分组成，即权限（authority）和路径（path） ​ a.权限用于对不同的应用程序做区分的，为了避免冲突，都会采用程序包名的方式来进行命名，如com.example.app，则该程序对应的权限命名为com.example.app.provider ​ b.路径用于对同一应用程序中不同的表做区分，通常加到权限后面，比如某个程序的数据库中有两张表，table1和table2，此时路径分别命名为/table1和/table2，与权限结合起来，内容URI就变成 com.example.app.provider/table1 和 com.example.app.provider/table2 ​ 在字符串头部加上协议声明，得到最标准的URI的格式写法如下： content://com.example.app.provider/table1 content://com.example.app.provider/table2 ​ 得到URI字符串后，将其解析成Uri对象才可作为参数传入增删改查方法中 ​ Uri uri = Uri.pase(“content://com.example.app.provider/table1”) 异步消息处理机制Android中的异步消息处理主要由四个部分组成，Message、Handler、MessageQueue、和Looper。 ###1.Messgae Message是线程之间传递的消息，可在内部携带少量的信息，用于不同线程之间交换数据。 例如what字段，除此之外arg1和arg2字段可携带一些整型数据，obj字段携带一个Object对象 2.Handler顾名思义就是处理者的意思，主要用你发送和处理消息。 发送消息一般是使用Handler的sendMessage()方法，发出的消息经过一系列辗转后，最终传递到Handler的handlerMessage()方法中。 3.MessageQueue消息队列的意思，它主要用于存放所有通过Handler发送的消息。这部分消息会一直存在消息队列中，等待被处理。每个线程中只会有一个MessageQueue对象 4.LooperLooper 是每个线程中的 MessageQueue 的管家，调用 Looper 的 loop()方法后，就会 进入到一个无限循环当中，然后每当发现 MessageQueue 中存在一条消息，就会将它取 出，并传递到 Handler 的 handleMessage()方法中。每个线程中也只会有一个 Looper 对象。 AsyncTaskAsyncTask 基于异步消息处理机制，Android帮我们做了很好的封装 AsyncTask是一个抽象类，使用它得用一个子类去继承它，继承时可以为AsyncTask类指定一个泛型参数。 1.Params​ 在执行 AsyncTask 时需要传入的参数，可用于在后台任务中使用。 2.Progress​ 后台任务执行时，如果需要在界面上显示当前的进度，则使用这里指定的泛型作为 进度单位。 3.Result​ 当任务执行完毕后，如果需要对结果进行返回，则使用这里指定的泛型作为返回值 类型。 因此，一个最简单的自定义 AsyncTask 就可以写成如下方式： 1234class DownloadTask extends AsyncTask&lt;Void, Integer, Boolean&gt; &#123;……&#125; 需要重写AsyncTask中的几个方法才能完成对任务的定制。 1.onPreExecute()​ 在后台任务开始之前调用，用于进行一些界面上的初始化，比如显示一个进度条对话框等 2.doInBackground(Params)​ 这个方法中的所有代码都会在子线程中运行，我们在这里处理所有耗时任务。任务完成后通过return语句来返回任务执行结果。如果AsyncTask的第三个泛型参数为void，就不返回执行结果。 ​ 注意：此方法中不可进行UI操作，如需更新UI元素，比如反馈当前任务进度，可以调用publishProgress(Progress …)方法来完成 3.onProgressUpdate(Progress…)​ 在后台任务中调用publishProgress(Progress…)方法后，会很快调用此方法，方法中携带的参数就是在后台任务中传递过来的。在这个方法中可以对UI进行操作，利用参数中的数值对界面元素进行相应的更新。 4.onPostExecute(Result)​ 当后台任务执行完毕并通过return语句进行返回时，这个方法就会被调用。返回的数据会作为参数传递到此方法中，可以利用返回的数据进行一些UI操作，比如提醒任务执行结果，以及关闭进度条对话框。 因此，一个比较完整的自定义 AsyncTask 就可以写成如下方式： 1234567891011121314151617181920212223242526272829303132333435363738class DownloadTask extends AsyncTask&lt;Void, Integer, Boolean&gt; &#123; protected void onPreExecute() &#123; progressDialog.show(); &#x2F;&#x2F; 显示进度对话框 &#125; @Override protected Boolean doInBackground(Void... params) &#123; try &#123; while (true) &#123; int downloadPercent &#x3D; doDownload(); &#x2F;&#x2F; 这是一个虚构的方法 publishProgress(downloadPercent); if (downloadPercent &gt;&#x3D; 100) &#123; break; &#125; &#125; &#125; catch (Exception e) &#123; return false; &#125; return true; &#125; @Override protected void onProgressUpdate(Integer... values) &#123; &#x2F;&#x2F; 在这里更新下载进度 progressDialog.setMessage(&quot;Downloaded &quot; + values[0] + &quot;%&quot;); &#125; @Override protected void onPostExecute(Boolean result) &#123; progressDialog.dismiss(); &#x2F;&#x2F; 关闭进度对话框 &#x2F;&#x2F; 在这里提示下载结果 if (result) &#123; Toast.makeText(context, &quot;Download succeeded&quot;, Toast.LENGTH_SHORT).show(); &#125; else &#123; Toast.makeText(context, &quot; Download failed&quot;, Toast.LENGTH_SHORT).show(); &#125; &#125;&#125; 四大组件 —- Service1. 定义一个服务基本的Service这样定义，onBind 是service中唯一一个抽象方法，所以必须在子类中进行实现 123456public class MyService extends Service&#123; @Override public IBinder onBind(Intent intent)&#123; return null; &#125;&#125; 让服务去处理一些事情，逻辑应该写在哪里呢？ 我们又重写onCreate()，onStartCommand()和onDestroy(）方法 123456789101112131415161718public class MyService extends Service &#123; @Override public IBinder onBind(Intent intent) &#123; return null; &#125; @Override public void onCreate() &#123; super.onCreate(); &#125; @Override public int onStartCommand(Intent intent, int flags, int startId) &#123; return super.onStartCommand(intent, flags, startId); &#125; @Override public void onDestroy() &#123; super.onDestroy(); &#125;&#125; 以上三个新加的方法是每个服务中最常用的方法 oncreate() 在服务创建的时候调用 onStartCommand() 会在每次服务启动的时候调用 onDestroy() 会在服务销毁的时候调用 所以一旦服务启动就需要执行的动作，逻辑写在onStartCommand()方法中，在onDestroy中回收那些不需要的资源。 注意：每个服务都需要在AndroidManifest.xml中注册才能生效，这似乎是四大组件的共同特点。 123456789101112131415&lt;manifest xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot; package&#x3D;&quot;com.example.servicetest&quot; android:versionCode&#x3D;&quot;1&quot; android:versionName&#x3D;&quot;1.0&quot; &gt; …… &lt;application android:allowBackup&#x3D;&quot;true&quot; android:icon&#x3D;&quot;@drawable&#x2F;ic_launcher&quot; android:label&#x3D;&quot;@string&#x2F;app_name&quot; android:theme&#x3D;&quot;@style&#x2F;AppTheme&quot; &gt; …… &lt;service android:name&#x3D;&quot;.MyService&quot; &gt; &lt;&#x2F;service&gt; &lt;&#x2F;application&gt;&lt;&#x2F;manifest&gt; 2. 启动和停止服务启动和停止服务主要借助Intent来实现 启动服务： 12Intent starIntent &#x3D; new Intent(this, MyService.class);startService(starIntent); 停止服务 12Intent stopIntent &#x3D; new Intent(this, MyService.class);stopService(stopIntent); 服务除了由活动来决定何时停止外，它也能自己让自己停下来，只需要服务自己调用stopSelf()方法即可 3.活动与服务进行通信​ 上面使用的方法在活动中启动和停止服务，但是服务启动后活动和服务基本没有关系了，无法得知服务的状态，如何才能让活动和服务联系更加紧密呢，让活动能随时指挥服务去执行某些任务？这就需要用到刚才那个我们必须要重写的onBind()方法了。 1234567891011121314151617public class MyService extends Service &#123; private DownloadBinder mBinder &#x3D; new DownloadBinder(); class DownloadBinder extends Binder &#123; public void startDownload() &#123; Log.d(&quot;MyService&quot;, &quot;startDownload executed&quot;); &#125; public int getProgress() &#123; Log.d(&quot;MyService&quot;, &quot;getProgress executed&quot;); return 0; &#125; &#125; @Override public IBinder onBind(Intent intent) &#123; return mBinder; &#125; ……&#125; ​ 这里我们在刚才建的MyService类中新建一个DownloadBinder类，并继承自Binder，这个类里提供方法供外部使用，我们这里提供了开始下载方法和获取下载进度的方法。然后在MyService中创建了DownloadBinder实例，并在onBind()方法中返回该实例。 ​ 如何在活动中调用服务里的方法呢？实际上当一个活动与服务绑定了之后，就可以调用Binder提供的方法了。 ​ 在活动中，我们首先创建ServiceConnection 匿名类，在里面重写onServiceConnected()方法和 onServiceDisconnected()方法，这两个方法分别在活动与服务成功绑定和解除绑定时调用。在onServiceConnecter()方法中，我们又向下转型得到的DownloadBinder实例，有了实例，我们就可以在活动中调用DownloadBinder中的任何public方法了。 12345678910111213private MyService.DownloadBinder downloadBinder;private ServiceConnection connection &#x3D; new ServiceConnection()&#123; @Override public void onServiceDisconnected(ComponentName name) &#123; &#125; @Override public void onServiceConnected(ComponentName name, IBinder service) &#123; downloadBinder &#x3D; (MyService.DownloadBinder) service; downloadBinder.startDownload(); downloadBinder.getProgress(); &#125;&#125; ​ 别高兴太早，我们还没实现绑定呢。绑定方法如下: 12Intent bindIntent &#x3D; new Intent(this, Myservice.class);bindService(bindIntent, connection, BIND_AUTO_CREATE); ​ bindService()接收三个参数，第一个就是刚构建出来的Intent对象，第二个参数是前面创角出来的ServiceConnection实例，第三个参数是标志位，BIND_AUTO_CREATE表示在活动和服务进行绑定后自动创建服务，此时MyService中的onCreate()方法会执行，但onStartCommand()方法不会执行。 ​ 解绑方法比较简单： 1unbindService(connetion); ​ 注意：任何一个服务在整个应用程序范围内都是通用的，即任何一个活动都可与之绑定，而且绑定后他们都可以获取到相同的DownloadBinder实例。 4.服务的生命周期onCreate() ,onStartCommand(),onBind(),onDestroy()等方法都是在服务生命周期里可能回调的方法。 1.项目中任意位置调用Context的startService()方法，相应的服务就会启动，并回调onStartCommand()方法，假如服务没创建过，onCreat()方法会先于onStartCommand()方法执行。 2.服务启动后一直保持运行，直到stopService()或stopSelf()被调用 每次调用startService()方法，onStartCommand()方法就会调用一次，但每个服务只会有一个实例，无论调用多少次startService()，只需要调用一次stopService()或stopSelf()即可停止该服务 3.调用Context的bindService()方法，获取一个服务的持久连接，这是就会回调服务的onBind()方法，如果服务没创建过，onCreate()会先于onBind()方法执行。调用方可以获取onBind()方法里返回的IBinder对象的实例，这样即可与服务自由的通信了。调用方与服务之间的连接没有断开，服务就会一直保持运行状态。 4.调用startService()方法后，又调用stopService()方法，onDestroy()方法就会执行，此时服务已经销毁。类似的，调用bindService()方法后又调用unbindService()方法，onDestroy()方法也会执行。 5.Android系统机制规定，一个服务被启动或者被绑定后，就会一直处于运行状态，必须同时调用stopService()和unbindService()方法，onDestroy()方法才会执行。 5.前台服务服务的系统优先级比较低，内存不足时，可能被回收，而前台服务就不会因为内存不足而被回收。 与普通服务最大区别：会有一个正在运行的图标在系统状态栏显示。下拉状态栏可以看到详细信息，类似通知的效果。 创建方法类似创建通知方法： 1234567891011121314151617public class MyService extends Service &#123; …… @Override public void onCreate() &#123; super.onCreate(); Notification notification &#x3D; new Notification(R.drawable.ic_launcher, &quot;Notification comes&quot;, System. currentTimeMillis()); Intent notificationIntent &#x3D; new Intent(this, MainActivity.class); PendingIntent pendingIntent &#x3D; PendingIntent.getActivity(this, 0, notificationIntent, 0); notification.setLatestEventInfo(this, &quot;This is title&quot;, &quot;This is content&quot;, pendingIntent); startForeground(1, notification); Log.d(&quot;MyService&quot;, &quot;onCreate executed&quot;); &#125; ……&#125; 网络1.使用HTTP协议访问网络​ Android 上发送HTTP请求有两种，1.HttpURLConnection和 2. HttpClient 1.1 HttpURLConnection先获取HttpURLConnection实例，new出一个URL对象，传入目标的网络地址，然后调一下openConnection()方法即可： 12URL url &#x3D; new URL(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;);HttpURLConnection connection &#x3D; (HttpURLConnection)url.openConnection(); 得到HttpURLConnection的实例后，设置HTTP请求所使用的方法。常用方法：GET 和 POST ​ GET：表示希望从服务器获取数据 ​ POST :表示希望提交数据到服务器 写法如下： 1connection.setRequestMethod(&quot;GET&quot;); 设置连接超时、读取超时的毫秒，以及服务器希望得到的一些消息头等。根据自己实际情况进行编写： 12connection.setConnectTimeout(8000);connection.setReadTimeout(8000); 之后调取getInputStream()方法就可以获取到服务器返回的输入流了，剩下的任务就是对输入流进行读取 1InputStream in &#x3D; connection.getInputStream(); 最后调用disconnect()方法关闭HTTP连接： 1connection.disconnect();","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"}]},{"title":"webpack笔记","slug":"webpack笔记","date":"2019-02-27T10:00:43.000Z","updated":"2020-01-07T05:07:58.617Z","comments":true,"path":"2019/02/27/webpack笔记/","link":"","permalink":"http://yoursite.com/2019/02/27/webpack%E7%AC%94%E8%AE%B0/","excerpt":"今天想了解一下webpack，但找了网上的一系列教程，都会或多或少出现一些不明报错，实在恼火，经过几番简化，终于用最简单的方法使用了webpack，在此记录一下","text":"今天想了解一下webpack，但找了网上的一系列教程，都会或多或少出现一些不明报错，实在恼火，经过几番简化，终于用最简单的方法使用了webpack，在此记录一下 一.环境配置1.首先，安装Node.js，这里不赘述，未接触nmp的童鞋可以参考Node.js安装配置 2.在cmd中输入 1npm install webpack -g 3.在自己测试的位置创建一个新的文件夹，命名webpack_demo 4.进入刚刚所创建的文件夹webpack_demo，按住shift键同时点击鼠标右键(即打开cmd并进入webpack_demo文件夹) 5.在打开的命令窗口键入：npm init，根据提示填写信息，name表示项目名，version表示版本等等，不一一赘述了，也可使用默认值，一路回车即可，最后出现“is this ok?”时，敲击回车键，webpack_demo文件夹便生成了package.json文件夹 二.构建webpack项目1.在webpack_demo文件夹下创建webpack.config.js文件，此文件为webpack的配置文件。具体内容如下： 123456789&#x2F;&#x2F;webpack.config.jsmodule.exports&#x3D;&#123; entry:&#39;.&#x2F;src&#x2F;js&#x2F;entry.js&#39;, &#x2F;&#x2F;页面入口文件 &#x2F;&#x2F;输出文件 output:&#123; filename:&#39;index.js&#39;, &#x2F;&#x2F;输出文件名 path:__dirname+&#39;&#x2F;out&#39;, &#x2F;&#x2F;输出文件路径 &#125;&#125; 参数简单说明： entry： 是 页面入口文件配置 （html文件引入唯一的js 文件） output：对应输出项配置 ​ path ：入口文件最终要输出到哪里， ​ filename：输出文件的名称 ​ publicPath：公共资源路径 2.接着，我们在创建一些基本的文件保存路径，我们这里创建网页中最基本的一些文件夹 3.接下来我们在index.html，和entry.js中填充点内容 123456789101112&lt;!-- index.html --&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset&#x3D;&quot;utf-8&quot;&gt; &lt;title&gt;&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div&gt;hello world&lt;&#x2F;div&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;.&#x2F;out&#x2F;index.js&quot;&gt;&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 12&#x2F;&#x2F; entry.jsdocument.write(&#39;呵呵到天亮&#39;); 4.完成以上操作，我们可以来试试效果了，在刚才所打开的cmd窗口中输入webpack （假如已经关闭，按上面第4步操作即可） 下面WARNING in configuration原因及解决办法可点击链接：https://blog.csdn.net/lgx1134569285/article/details/87986317 5.看到上面 的一幕，恭喜你，已经成功了，我们再进一步验证一下， 目录下多了一个out文件夹，out文件生成了我们所命名的index.js 打开内容如下 打开index.html文件，结果不仅打印出html文件中的”hello world”，js中的打印123也生效了 (ps：这里打印中文时假如出现乱码，记得在html文件的标签添加编码)","categories":[{"name":"javaScripts","slug":"javaScripts","permalink":"http://yoursite.com/categories/javaScripts/"},{"name":"前端","slug":"javaScripts/前端","permalink":"http://yoursite.com/categories/javaScripts/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"http://yoursite.com/tags/webpack/"}],"keywords":[{"name":"javaScripts","slug":"javaScripts","permalink":"http://yoursite.com/categories/javaScripts/"},{"name":"前端","slug":"javaScripts/前端","permalink":"http://yoursite.com/categories/javaScripts/%E5%89%8D%E7%AB%AF/"}]}]}